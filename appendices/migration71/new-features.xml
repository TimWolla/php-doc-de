<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d987f5fea44af3e2b2740bebc9700903cdfcf1f6 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Neue Features</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>Nullable-Typen</title>

  <para>
   Die Typen für Parameter und Rückgabewerte können nun durch ein
   vorangestelltes Fragezeichen als nullable gekennzeichnet werden. Das
   bedeutet, dass neben dem angegebenen Typ auch &null; als Parameter
   übergeben bzw. als Wert zurückgegeben werden kann.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturnA(): ?string
{
    return 'elePHPant';
}

var_dump(testReturnA());

function testReturnB(): ?string
{
    return null;
}

var_dump(testReturnB());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(9) "elePHPant"
NULL
string(9) "elePHPant"
NULL
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Void-Funktionen</title>

  <para>
   Der Rückgabetyp <type>void</type> wurde eingeführt. Funktionen, die mit
   void als Rückgabetyp deklariert sind, müssen ihre return-Anweisung entweder
   ganz weglassen, oder eine leere return-Anweisung verwenden. &null; ist für
   eine void-Funktion kein gültiger Rückgabewert.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right): void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   Wenn versucht wird, den Rückgabewert einer void-Funktion zu verwenden, wird
   dieser einfach als &null; ausgewertet, ohne dass eine Warnung ausgegeben
   wird. Der Grund dafür ist, dass Warnungen die Verwendung übergeordneter
   generischer Funktionen zur Folge hätte.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Symmetrische Destrukturierung (Zerlegung) von Arrays</title>

  <para>
   Die verkürzte Array-Syntax (<literal>[]</literal>) kann nun als Alternative
   zur bestehenden <function>list</function>-Syntax verwendet werden, um
   Arrays für Zuweisungen zu zerlegen (auch innerhalb von
   <literal>foreach</literal>).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// list()-Format
list($id1, $name1) = $data[0];

// []-Format
[$id1, $name1] = $data[0];

// list()-Format
foreach ($data as list($id, $name)) {
    // der Code mit $id und $name
}

// []-Format
foreach ($data as [$id, $name]) {
    // der Code mit $id und $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>Sichtbarkeit von Klassenkonstanten</title>

  <para>
   Es ist nun möglich, den Geltungsbereich von Klassenkonstanten zu
   definieren.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title>Der Pseudo-Typ <type>iterable</type></title>

  <para>
   Ein neuer Pseudo-Typ (analog zu <type>callable</type>) namens
   <type>iterable</type> wurde eingeführt. Er kann als Typ für Parameter und
   Rückgabe verwendet werden, wo er entweder Arrays oder Objekte akzeptiert,
   die die Schnittstelle <classname>Traversable</classname> implementieren.
   Bei abgeleiteten Typen kann der Parametertyp einer Kindklasse die Typen
   <type>array</type> und <classname>Traversable</classname> der Elternklasse
   auf <type>iterable</type> erweitern. Bei den Rückgabetypen kann eine
   Kindklasse den Rückgabetyp <type>iterable</type> der Elternklasse
   einschränken auf <type>array</type> oder ein Objekt, das
   <classname>Traversable</classname> implementiert.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>Behandlung mehrerer Exceptions in einem Catch-Block</title>

  <para>
   Ein catch-Block kann nun mehrere Exceptions abfangen, indem er sie durch
   Pipe-Zeichen (<literal>|</literal>) getrennt auflistet. Dies kann nützlich
   sein, wenn verschiedene Exceptions verschiedener Klassenebenen auf dieselbe
   Weise behandelt werden sollen.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // etwas Code
} catch (FirstException | SecondException $e) {
    // beide Exceptions behandeln
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title>Unterstützung für Schlüssel in <function>list</function></title>

  <para>
   Es ist nun möglich, Schlüssel mit <function>list</function> oder mit der
   neuen verkürzten <literal>[]</literal>-Syntax anzugeben. Damit lassen sich
   Arrays mit nicht-ganzzahligen oder nicht-sequenziellen Schlüsseln zerlegen.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// list()-Format
list("id" => $id1, "name" => $name1) = $data[0];

// []-Format
["id" => $id1, "name" => $name1] = $data[0];

// list()-Format
foreach ($data as list("id" => $id, "name" => $name)) {
    // der Code mit $id und $name
}

// []-Format
foreach ($data as ["id" => $id, "name" => $name]) {
    // der Code mit $id und $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>Unterstützung für negative Zeichenketten-Offsets</title>

  <para>
   Bei den
   <link linkend="book.strings">Funktionen für die Manipulation von Zeichenketten</link>,
   die Offsets akzeptieren, können nun negative Zeichenketten-Offsets
   verwendet werden. Dies gilt auch für die
   <link linkend="language.types.string.substr">Indizierung von Zeichenketten</link>
   mit <literal>[]</literal> oder <literal>{}</literal>. In solchen Fällen
   wird ein negativer Offset als Offset relativ zum Ende der Zeichenkette
   interpretiert.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   Negative Zeichenketten- und Array-Offsets können nun auch in der einfachen
   Syntax zum Analysieren von Variablen innerhalb von Zeichenketten verwendet
   werden.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "Das letzte Zeichen von '$string' ist '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Das letzte Zeichen von 'bar' ist 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>Unterstützung für AEAD in ext/openssl</title>

  <para>
   Durch Erweiterung der Funktionen <function>openssl_encrypt</function> und
   <function>openssl_decrypt</function> um zusätzliche Parameter wird nun AEAD
   (die Modi GCM und CCM) unterstützt.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>Callables mit <methodname>Closure::fromCallable</methodname> in <classname>Closure</classname>s umwandeln</title>

  <para>
   Der Klasse <classname>Closure</classname> wurde eine neue statische Methode
   hinzugefügt, mit der <type>Callable</type>s einfach in
   <classname>Closure</classname>-Objekte umgewandelt werden können.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('irgendein Wert');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "irgendein Wert"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Asynchrone Signalverarbeitung</title>

  <para>
   Eine neue Funktion namens <function>pcntl_async_signals</function> wurde
   eingeführt, um eine asynchrone Signalverarbeitung ohne Verwendung von
   Ticks (die eine Menge zusätzliche Rechenzeit verursachen) zu ermöglichen.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // asynchrone Signale einschalten

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>Unterstützung für HTTP/2-Server-Push in ext/curl</title>

  <para>
   Die Erweiterung CURL unterstützt nun "Server-Push" (erfordert Version 7.46
   und höher). Dies kann durch die Funktion
   <function>curl_multi_setopt</function> mit der neuen Konstante
   <constant>CURLMOPT_PUSHFUNCTION</constant> genutzt werden. Die Konstanten
   <constant>CURL_PUSH_OK</constant> und <constant>CURL_PUSH_DENY</constant>
   wurden ebenfalls hinzugefügt, damit die Ausführung des
   Server-Push-Callbacks entweder genehmigt oder verweigert werden kann.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>Optionen für den Stream-Kontext</title>

  <para>
   Die Stream-Kontext-Option
   <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link> wurde
   hinzugefügt.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
