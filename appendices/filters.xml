<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Liste verfügarer Filter</title>
 <para>
  Im Folgenden sind einige eingebaute Stream-Filter aufgelistet, die mit der
  Funktion <function>stream_filter_append</function> verwendet werden können.
  Je nach verwendeter PHP-Version gibt es möglicherweise mehr (oder weniger)
  Filter als die hier aufgeführten.
 </para>

 <para>
  Es ist zu erwähnen, dass es eine leichte Asymmetrie zwischen den Funktionen
  <function>stream_filter_append</function> und
  <function>stream_filter_prepend</function> gibt. Jeder PHP-Stream enthält
  einen kleinen <emphasis>Lesepuffer</emphasis>, in dem er Datenblöcke
  speichert, die aus dem Dateisystem oder anderen Ressourcen abgerufen werden,
  um die Daten auf die effizienteste Weise zu verarbeiten. Wenn Daten aus der
  Ressource gezogen und in den internen Puffer des Streams geschoben werden,
  werden sie sofort durch alle damit verbundenen Filter verarbeitet,
  unabhängig davon, ob die PHP-Anwendung tatsächlich bereit ist für die Daten
  oder nicht. Wenn ein Filter <emphasis>angehängt</emphasis> wird, während
  sich Daten im Lesepuffer befinden, werden diese Daten sofort vom Filter
  verarbeitet. Das bedeutet, dass der Puffer transparent gehandhabt werden
  kann, also ohne dass man von dessen Existenz weiß. Wenn ein Filter jedoch
  <emphasis>vorangestellt</emphasis> wird, während Daten im Lesepuffer liegen,
  werden diese Daten <emphasis>NICHT</emphasis> durch diesen Filter
  verarbeitet. Es wird stattdessen gewartet, bis der nächste Datenblock von
  der Ressource abgerufen wird.
 </para>

 <para>
  Mit der Funktion <function>stream_get_filters</function> kann eine Liste der
  in der verwendeten PHP-Version installierten Filter abgerufen werden.
 </para>

 <section xml:id="filters.string">
  <title>Filter für Zeichenketten</title>

  <simpara>
   Jeder dieser Filter tut genau das, was sein Name andeutet und entspricht
   dem Verhalten einer eingebauten php-Funktion zur Handhabung von
   Zeichenketten. Weitere Informationen zu einem bestimmten Filter sind auf
   der Handbuchseite der entsprechenden Funktion zu finden.
  </simpara>

  <section xml:id="filters.string.rot13">
   <title>string.rot13</title>
   <simpara>
    Die Verwendung dieses Filters entspricht der Verarbeitung aller
    Stream-Daten mit der Funktion <function>str_rot13</function>.
   </simpara>
   <example>
    <title>string.rot13</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "This is a test.\n");
/* Ausgabe:  Guvf vf n grfg.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.toupper">
   <title>string.toupper</title>
   <simpara>
    Die Verwendung dieses Filters entspricht der Verarbeitung aller
    Stream-Daten mit der Funktion <function>strtoupper</function>.
   </simpara>
   <example>
    <title>string.toupper</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "This is a test.\n");
/* Ausgabe:  THIS IS A TEST.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.tolower">
   <title>string.tolower</title>
   <simpara>
    Die Verwendung dieses Filters entspricht der Verarbeitung aller
    Stream-Daten mit der Funktion <function>strtolower</function>.
   </simpara>
   <example>
    <title>string.tolower</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "This is a test.\n");
/* Ausgabe:  this is a test.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.strip_tags">
   <title>string.strip_tags</title>
   <simpara>
    Die Verwendung dieses Filters entspricht der Verarbeitung aller
    Stream-Daten mit der Funktion <function>strip_tags</function>. Er
    akzeptiert Parameter in einer von zwei Formen: entweder als Zeichenkette
    mit einer Liste von Tags, wie der zweite Parameter der Funktion
    <function>strip_tags</function>, oder als Array von Tag-Namen.
   </simpara>
   <para>
    &warn.deprecated.feature-7-3-0;
   </para>
   <example>
    <title>string.strip_tags</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* Ausgabe:  bolded text enlarged to a level 1 heading   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* Ausgabe:  bolded text enlarged to a level 1 heading   */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.convert">
  <title>Umwandlungsfilter</title>

  <simpara>
   Wie die string.*-Filter führen auch die convert.*-Filter Aktionen aus, die
   ihren Namen entsprechen. Weitere Informationen zu einem bestimmten Filter
   sind auf der Handbuchseite für die entsprechende Funktion zu finden.
  </simpara>

  <section xml:id="filters.convert.base64">
   <title>convert.base64-encode und convert.base64-decode</title>
   <simpara>
    Die Verwendung dieser Filter entspricht der Verarbeitung aller
    Stream-Daten mit den Funktionen <function>base64_encode</function> und
    <function>base64_decode</function>.
    <literal>convert.base64-encode</literal> unterstützt Parameter, die als
    assoziatives Array übergeben werden. Wenn der Parameter
    <parameter>line-length</parameter> angegeben wird, wird die base64-Ausgabe
    in Abschnitte von <parameter>line-length</parameter> Zeichen aufgeteilt.
    Wenn der Parameter <parameter>line-break-chars</parameter> angegeben wird,
    werden die einzelnen Teilstücke durch die angegebenen Zeichen getrennt.
    Diese Parameter haben die gleiche Wirkung wie die Verwendung von
    <function>base64_encode</function> in Verbindung mit
    <function>chunk_split</function>.
   </simpara>
   <example>
    <title>
     convert.base64-encode &amp;
     convert.base64-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Ausgabe:  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Ausgabe:  VGhpcyBp
          :  cyBhIHRl
          :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* Ausgabe:  This is a test.  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.covert.quoted-printable">
   <title>convert.quoted-printable-encode und convert.quoted-printable-decode</title>
   <simpara>
    Die Verwendung der Decode-Version dieses Filters entspricht der
    Verarbeitung aller Stream-Daten mit der Funktion
    <function>quoted_printable_decode</function>. Es gibt keine Funktion, die
    <literal>convert.quoted-printable-encode</literal> entspricht.
    <literal>convert.quoted-printable-encode</literal> unterstützt Parameter,
    die als assoziatives Array übergeben werden. Zusätzlich zu den Parametern,
    die von <literal>convert.base64-encode</literal> unterstützt werden,
    unterstützt <literal>convert.quoted-printable-encode</literal> auch die
    booleschen Parameter <parameter>binary</parameter> und
    <parameter>force-encode-first</parameter>.
    <literal>convert.base64-decode</literal> unterstützt nur den Parameter
    <parameter>line-break-chars</parameter>, der für die Zeilentrennung der
    kodierten Daten verwendet wird.
   </simpara>
   <example>
    <title>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* Ausgabe:  =This is a test.=0A  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.convert.iconv">
   <title>convert.iconv.*</title>
   <simpara>
    Die <literal>convert.iconv.*</literal>-Filter sind verfügbar, wenn die
    <link linkend="book.iconv">iconv</link>-Unterstützung aktiviert ist. Die
    Verwendung dieser Filter entspricht der Verarbeitung aller Stream-Daten
    mit der Funktion <function>iconv</function>. Diese Filter unterstützen
    keine Parameter, sondern erwarten stattdessen, dass die Eingabe- und
    Ausgabekodierungen als Teil des Filternamens angegeben werden, &dh;
    entweder als
    <literal>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</literal>
    oder als
    <literal>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</literal>
    (beide Schreibweisen sind semantisch äquivalent).
   </simpara>

   <example>
    <title>convert.iconv.*</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.iconv.utf-16le.utf-8');
fwrite($fp, "T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0");
fclose($fp);
/* Ausgabe: This is a test. */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.compression">
  <title>Komprimierungsfilter</title>

  <simpara>
   Während die
   <link linkend="wrappers.compression">Komprimierungs-Wrapper</link> die
   Möglichkeit bieten, auf dem lokalen Dateisystem gzip- und bz2-kompatible
   Dateien zu erstellen, können sie weder mit komprimierten
   Netzwerkprotokollen umgehen, noch bieten sie eine Möglichkeit, einen
   unkomprimierten Stream zu erstellen und ihn dann zu komprimieren. Im
   Gegensatz dazu können Komprimierungsfilter jederzeit auf alle
   Stream-Ressourcen angewendet werden.
  </simpara>

  <note>
   <simpara>
    Komprimierungsfilter erzeugen <emphasis>keine</emphasis> Kopfzeilen und
    Anhänge (Trailer), wie sie von Kommandozeilenprogrammen wie
    <literal>gzip</literal> verwendet werden. Sie komprimieren und
    dekomprimieren nur die eigentlichen Nutzdaten innerhalb des Streams.
   </simpara>
  </note>

  <section xml:id="filters.compression.zlib">
   <title>zlib.deflate und zlib.inflate</title>
   <simpara>
    <literal>zlib.deflate</literal> (Komprimierung) und
    <literal>zlib.inflate</literal> (Dekomprimierung) sind Implementierungen
    der in <link xlink:href="&url.rfc;1951">RFC 1951</link> beschriebenen
    Komprimierungsmethoden. Der <literal>deflate</literal>-Filter benötigt bis
    zu drei Parameter, die als assoziatives Array übergeben werden.

    <parameter>level</parameter> gibt die Komprimierungsstufe an, die
    verwendet werden soll (1-9). Je höher die Zahl, desto kleiner wird im
    Allgemeinen die Größe der komprimierten Daten, aber umso länger wird auch
    die Verarbeitungszeit. Es gibt auch zwei spezielle Komprimierungsstufen: 0
    (keine Komprimierung) und -1 (die zlib-interne Voreinstellung - derzeit 6).

    <parameter>window</parameter> ist der Logarithmus zur Basis 2 für die
    Größe des Loopback-Fensters (der Speicherpuffer). Höhere Werte (bis zu 15
    -- 32768 Bytes) ergeben eine bessere Komprimierung auf Kosten des
    Speichers, während niedrigere Werte (bis zu 9 -- 512 Bytes) eine
    schlechtere Komprimierung bei geringerem Speicherbedarf ergeben. Der
    derzeitige Standardwert für <parameter>window</parameter> ist
    <literal>15</literal>.

    <parameter>memory</parameter> gibt an, wieviel Arbeitsspeicher zugewiesen
    werden soll. Die gültigen Werte reichen von 1 (minimale Zuweisung) bis 9
    (maximale Zuweisung). Diese Speicherzuweisung wirkt sich nur auf die
    Geschwindigkeit aus und hat keinen Einfluss auf die Größe der
    komprimierten Daten.
   </simpara>

   <note>
    <simpara>
     Da die Komprimierungsstufe der am häufigsten verwendete Parameter ist,
     kann er auch als einfacher Integer-Wert statt als Array-Element angegeben
     werden.
    </simpara>
   </note>

   <simpara>
    Die zlib.*-Komprimierungsfilter sind verfügbar wenn die
    <link linkend="ref.zlib">zlib</link>-Unterstützung aktiviert ist.
   </simpara>

   <example>
    <title><literal>zlib.deflate</literal> und <literal>zlib.inflate</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "Der Originaltext ist " . strlen($original_text) . " Zeichen lang.\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "Die komprimierte Datei hat " . filesize('test.deflated') . " Bytes.\n";
echo "Der Originaltext war:\n";
/* Verwendung von readfile und zlib.inflate, um auf der Stelle zu dekomprimieren */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Erzeugt die Ausgabe:

Der Originaltext ist 70 Zeichen lang.
Die komprimierte Datei hat 56 Bytes.
Der Originaltext war:
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>Vereinfachte Verwendung von <literal>zlib.deflate</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "Der Originaltext ist " . strlen($original_text) . " Zeichen lang.\n";

$fp = fopen('test.deflated', 'w');
/* Hier steht "6" für die Komprimierungsstufe 6 */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "Die komprimierte Datei hat " . filesize('test.deflated') . " Bytes.\n";

/* Erzeugt die Ausgabe:

Der Originaltext ist 70 Zeichen lang.
Die komprimierte Datei hat 56 Bytes.

 */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.compression.bzip2">
   <title>bzip2.compress und bzip2.decompress</title>
   <simpara>
    <literal>bzip2.compress</literal> und <literal>bzip2.decompress</literal>
    funktionieren auf die gleiche Weise wie die oben beschriebenen
    zlib-Filter.

    Der Filter <literal>bzip2.compress</literal> akzeptiert bis zu zwei
    Parameter, die als Elemente eines assoziativen Arrays angegeben werden:

    <parameter>blocks</parameter> ist ein ganzzahliger Wert von 1 bis 9, der
    die Anzahl der 100kB-Speicherblöcke angibt, die dem Arbeitsbereich
    zugewiesen werden sollen.

    <parameter>work</parameter> ist ebenfalls ein ganzzahliger Wert. Er reicht
    von 0 bis 250 und gibt an, wie viel Aufwand mit der normalen
    Komprimierungsmethode betrieben werden soll, bevor auf eine langsamere,
    aber zuverlässigere Methode zurückgegriffen wird. Wenn dieser Wert
    geändert wird, wirkt sich das nur auf die Geschwindigkeit der
    Komprimierung aus. Weder die Größe der komprimierten Ausgabe noch der
    Speicherverbrauch werden durch diese Einstellung verändert. Ein Wert von 0
    bedeutet, dass die Bibliothek ihre Standardkonfiguration verwenden soll.

    Der Filter <literal>bzip2.decompress</literal> akzeptiert nur einen
    Parameter, der entweder als gewöhnlicher boolescher Wert oder als Element
    <parameter>small</parameter> eines assoziativen Arrays übergeben werden
    kann.

    Wenn <parameter>small</parameter> auf &true; gesetzt ist, wird die
    bzip-Bibliothek angewiesen, die Dekomprimierung auf Kosten der
    Geschwindigkeit mit minimalem Speicherplatzbedarf durchzuführen.
   </simpara>

   <simpara>
    Die bzip2.*-Komprimierungsfilter sind verfügbar wenn die
    <link linkend="ref.bzip2">bz2</link>-Unterstützung aktiviert ist.
   </simpara>

   <example>
    <title><literal>bzip2.compress</literal> und <literal>bzip2.decompress</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "Die Originaldatei hat " . filesize('LICENSE') . " Bytes.";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "Die komprimierte Datei hat " . filesize('LICENSE.compressed') . " Bytes.\n";

/* Erzeugt die Ausgabe:

Die Originaldatei hat 3288 Bytes.
Die komprimierte Datei hat 1488 Bytes.

 */
?>
]]>
    </programlisting>
   </example>
  </section>
  </section>

 <section xml:id="filters.encryption">
  <title>Verschlüsselungsfilter</title>

  <para>
   Verschlüsselungsfilter sind besonders nützlich für die Verschlüsselung von
   Dateien/Streams.
  </para>

  <section xml:id="filters.encryption.mcrypt">
   <title>mcrypt.* und mdecrypt.*</title>
   <para>
     &warn.deprecated.feature-7-1-0;
   </para>

   <simpara>
   <literal>mcrypt.*</literal> und <literal>mdecrypt.*</literal>
    ermöglichen mit Hilfe von libmcrypt die symmetrische Ver- und
    Entschlüsselung. Beide Gruppen von Filtern unterstützen die gleichen
    Algorithmen, die für die Erweiterung
    <link linkend="ref.mcrypt">mcrypt</link> in Form von
    <literal>mcrypt.ciphername</literal> zur Verfügung stehen, wobei
    <parameter>ciphername</parameter> der Name der Verschlüsselung ist, wie er
    auch an die Funktion <function>mcrypt_module_open</function> übergeben
    werden würde. Die folgenden fünf Filterparameter sind ebenfalls verfügbar:
   </simpara>

   <para>
    <table>
     <title>mcrypt-Filterparameter</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Parameter</entry>
        <entry>Erforderlich?</entry>
        <entry>Standard</entry>
        <entry>Beispielwerte</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mode</entry>
        <entry>Optional</entry>
        <entry>cbc</entry>
        <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
       </row>
       <row>
        <entry>algorithms_dir</entry>
        <entry>Optional</entry>
        <entry>ini_get('mcrypt.algorithms_dir')</entry>
        <entry>Das Verzeichnis, das die Algorithmen enthält</entry>
       </row>
       <row>
        <entry>modes_dir</entry>
        <entry>Optional</entry>
        <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>Das Verzeichnis, das die Modi enthält</entry>
       </row>
       <row>
        <entry>iv</entry>
        <entry>Required</entry>
        <entry>N/A</entry>
        <entry>
         Typischerweise 8, 16 oder 32 Byte Binärdaten. Abhängig von der
         Verschlüsselung
        </entry>
       </row>
       <row>
        <entry>key</entry>
        <entry>Required</entry>
        <entry>N/A</entry>
        <entry>
         Typischerweise 8, 16 oder 32 Byte Binärdaten. Abhängig von der
         Verschlüsselung
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <example>
    <title>Ver- und Entschlüsselung mit Blowfish</title>
    <programlisting role="php">
<![CDATA[
<?php
// $key wird als zuvor generiert angenommen
$iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$fp = fopen('encrypted-file.enc', 'wb');
fwrite($fp, $iv);
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mcrypt.blowfish', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'zu verschlüsselnede Nachricht');
fclose($fp);

// entschlüsseln...
$fp = fopen('encrypted-file.enc', 'rb');
$iv = fread($fp, $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC));
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mdecrypt.blowfish', STREAM_FILTER_READ, $opts);
$data = rtrim(stream_get_contents($fp)); // entfernt das Null-Padding
fclose($fp);
echo $data;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Verschlüsseln einer Datei mit AES-128 CBC und SHA256 HMAC</title>
    <programlisting role="php">
<![CDATA[
<?php
AES_CBC::encryptFile($password, "klartext.txt", "verschluesselt.enc");
AES_CBC::decryptFile($password, "verschluesselt.enc", "entschluesselt.txt");

class AES_CBC
{
   protected static $KEY_SIZES = array('AES-128'=>16,'AES-192'=>24,'AES-256'=>32);
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; } // Standard AES-128
   public static function encryptFile($password, $input_stream, $aes_filename){
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $fin = fopen($input_stream, "rb");
      $fc = fopen($aes_filename, "wb+");
      if (!empty($fin) && !empty($fc)) {
         fwrite($fc, str_repeat("_", 32) ); // Platzhalter, hier wird später SHA256 HMAC eingefügt
         fwrite($fc, $hmac_salt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $esalt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mcrypt.rijndael-128', STREAM_FILTER_WRITE, $opts);
         $infilesize = 0;
         while (!feof($fin)) {
            $block = fread($fin, 8192);
            $infilesize+=strlen($block);
            fwrite($fc, $block);
         }
         $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
         $padding = $block_size - ($infilesize % $block_size); // $padding ist eine Zahl von 1-16
         fwrite($fc, str_repeat(chr($padding), $padding) ); // PKCS7-Padding durchführen
         fclose($fin);
         fclose($fc);
         $hmac_raw = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
         $fc = fopen($aes_filename, "rb+");
         fwrite($fc, $hmac_raw); // Platzhalter überschreiben
         fclose($fc);
      }
   }
   public static function decryptFile($password, $aes_filename, $out_stream) {
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $hmac_raw = file_get_contents($aes_filename, false, NULL,  0, 32);
      $hmac_salt = file_get_contents($aes_filename, false, NULL, 32, $iv_size);
      $hmac_calc = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
      $fc = fopen($aes_filename, "rb");
      $fout = fopen($out_stream, 'wb');
      if (!empty($fout) && !empty($fc) && self::hash_equals($hmac_raw,$hmac_calc)) {
         fread($fc, 32+$iv_size); // sha256 hmac und salt weglassen
         $esalt = fread($fc, $iv_size);
         $iv    = fread($fc, $iv_size);
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mdecrypt.rijndael-128', STREAM_FILTER_READ, $opts);
         while (!feof($fc)) {
            $block = fread($fc, 8192);
            if (feof($fc)) {
               $padding = ord($block[strlen($block) - 1]); // PKCS7-Padding wird angenommen
               $block = substr($block, 0, 0-$padding);
            }
            fwrite($fout, $block);
         }
         fclose($fout);
         fclose($fc);
      }
   }
   private static function hash_equals($str1, $str2) {
      if(strlen($str1) == strlen($str2)) {
         $res = $str1 ^ $str2;
         for($ret=0,$i = strlen($res) - 1; $i >= 0; $i--) $ret |= ord($res[$i]);
         return !$ret;
      }
      return false;
   }
   private static function calculate_hmac_after_32bytes($password, $hsalt, $filename) {
      static $init=0;
      $init or $init = stream_filter_register("user-filter.skipfirst32bytes", "FileSkip32Bytes");
      $stream = 'php://filter/read=user-filter.skipfirst32bytes/resource=' . $filename;
      $hkey = hash_pbkdf2("sha256", $password, $hsalt, $iterations=1000, 24, $raw=true);
      return hash_hmac_file('sha256', $stream, $hkey, $raw=true);
   }
}
class FileSkip32Bytes extends php_user_filter
{
   private $skipped=0;
   function filter($in, $out, &$consumed, $closing)  {
      while ($bucket = stream_bucket_make_writeable($in)) {
         $outlen = $bucket->datalen;
         if ($this->skipped<32){
            $outlen = min($bucket->datalen,32-$this->skipped);
            $bucket->data = substr($bucket->data, $outlen);
            $bucket->datalen = $bucket->datalen-$outlen;
            $this->skipped+=$outlen;
         }
         $consumed += $outlen;
         stream_bucket_append($out, $bucket);
      }
      return PSFS_PASS_ON;
   }
}
class AES_128_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; }
}
class AES_192_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-192']; }
}
class AES_256_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-256']; }
}
]]>
    </programlisting>
   </example>
  </section>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
