<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2485376b5b3d6b40e5c0d4e198ab5ff2a142425c Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="migration70.incompatible.error-handling">
 <title>Änderungen im Umgang mit Fehlern und Exceptions</title>

 <para>
  Viele schwerwiegende und wiederherstellbare schwerwiegende Fehler wurden in
  PHP 7 in Exceptions umgewandelt. Diese Fehler-Exceptions erben von der
  Klasse <classname>Error</classname>, die ihrerseits die Schnittstelle
  <classname>Throwable</classname> implementiert (die neue Basisschnittstelle,
  die alle Exceptions erben).
 </para>

 <para>
  Das bedeutet, dass benutzerdefinierte Funktionen für die Fehlerbehandlung
  eventuell nicht mehr ausgelöst werden, da stattdessen Exceptions ausgelöst
  werden (was neue schwerwiegende Fehler für nicht abgefangene
  <classname>Error</classname>-Exceptions verursacht).
 </para>

 <para>
  Eine genauere Beschreibung der Funktionsweise von Fehlern in PHP 7 ist auf
  der Seite <link linkend="language.errors.php7">Fehler in PHP 7</link> zu
  finden. Dieser Migrationsleitfaden zählt lediglich die Änderungen auf, die
  die Abwärtskompatibilität betreffen.
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   Bei der Funktion <function>set_exception_handler</function> ist nicht mehr
   gewährleistet, dass sie <classname>Exception</classname>-Objekte erhält.
  </title>

  <para>
   Code, der einen Exception-Handler mit der Funktion
   <function>set_exception_handler</function> unter Verwendung einer
   Deklaration vom Typ <classname>Exception</classname> implementiert, führt
   zu einem fatalen Fehler, wenn ein <classname>Error</classname>-Objekt
   ausgelöst wird.
  </para>

  <para>
   Wenn der Handler sowohl mit PHP 5 als auch mit PHP 7 funktionieren soll,
   sollte die Typdeklaration aus dem Handler entfernt werden. Bei Code, der
   migriert wird, um nur unter PHP 7 zu funktionieren, genügt es stattdessen,
   die <classname>Exception</classname>-Typdeklaration durch
   <classname>Throwable</classname> zu ersetzen.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// PHP-Code, der nicht mehr funktioniert
function handler(Exception $e) { /* ... */ }
set_exception_handler('handler');

// PHP 5 und 7 kompatibel
function handler($e) { /* ... */ }

// Nur PHP 7
function handler(Throwable $e) { /* ... */ }
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>Interne Konstruktoren lösen bei Fehlern immer Exceptions aus</title>

  <para>
   Zuvor gaben einige interne Klassen &null; oder ein unbrauchbares Objekt
   zurück, wenn der Konstruktor fehlschlug. Alle internen Klassen lösen nun in
   einem solchen Fall eine <classname>Exception</classname> aus, so wie es die
   benutzerdefinierten Klassen bereits tun.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>Parser-Fehler lösen <classname>ParseError</classname> aus</title>

  <para>
   Parser-Fehler erzeugen nun ein <classname>ParseError</classname>-Objekt.
   Die Fehlerbehandlung für <function>eval</function> sollte einen
   &catch;-Block enthalten, der diesen Fehler behandeln kann.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.error-handling.strict">
  <title>Änderungen des Schweregrads von E_STRICT-Meldungen</title>

  <para>
   Alle <constant>E_STRICT</constant>-Meldungen wurden neu eingestuft. Die
   Konstante <constant>E_STRICT</constant> wurde beibehalten, sodass Aufrufe
   wie <literal>error_reporting(E_ALL|E_STRICT)</literal> keinen Fehler
   verursachen.
  </para>
  <para>
   <table>
    <title>Änderungen des Schweregrads von E_STRICT-Meldungen</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Situation</entry>
        <entry>Neue Stufe/Verhalten</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Indizierung durch eine Ressource</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Abstrakte statische Methoden</entry>
        <entry>Hinweis entfernt, löst keinen Fehler aus</entry>
       </row>
       <row>
        <entry>"Neudefinieren" eines Konstruktors</entry>
        <entry>Hinweis entfernt, löst keinen Fehler aus</entry>
       </row>
       <row>
        <entry>Inkompatible Signaturen bei der Vererbung</entry>
        <entry><constant>E_WARNING</constant></entry>
       </row>
       <row>
        <entry>Gleiche (kompatible) Eigenschaft in zwei verwendeten Traits</entry>
        <entry>Hinweis entfernt, löst keinen Fehler aus</entry>
       </row>
       <row>
        <entry>Nicht-statischer Zugriff auf eine statische Eigenschaft</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Nur Variablen sollten per Referenz zugewiesen werden</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Nur Variablen sollten per Referenz übergeben werden</entry>
        <entry><constant>E_NOTICE</constant></entry>
       </row>
       <row>
        <entry>Statischer Aufruf nicht-statischer Methoden</entry>
        <entry><constant>E_DEPRECATED</constant></entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
