<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: e4b889a3e8b9d87ab605aac9bbe85d2c16c69a1b Reviewer: samesch -->
<!-- CREDITS: tzwenny, betz -->
<sect1 xml:id="language.operators.assignment">
 <title>Zuweisungsoperatoren</title>
 <titleabbrev>Zuweisung</titleabbrev>
 <simpara>
  Der einfachste Zuweisungsoperator ist "=". Wahrscheinlich kommt man als
  erstes auf die Idee, ihn mit "ist gleich" zu bezeichnen. Das ist falsch. In
  Wirklichkeit bedeutet er, dass dem linken Operanden der Wert des Ausdrucks
  auf der rechten Seite zugewiesen wird (man müsste ihn also mit "wird gesetzt
  auf den Wert von" übersetzen).
 </simpara>
 <para>
  Der Wert eines Zuweisungs-Ausdruckes ist der zugewiesene Wert, &dh; der Wert
  des Ausdruckes "<literal>$a = 3</literal>" ist 3. Das erlaubt es, einige
  raffinierte Dinge anzustellen:
  <example>
   <title>Verschachtelte Zuweisungen</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = ($b = 4) + 5; // $a ist nun gleich 9 und $b wurde auf den Wert 4 gesetzt.
var_dump($a);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Zusätzlich zu dem oben vorgestellten Zuweisungsoperator "=" gibt es
  "kombinierte Operatoren" für alle
  <link linkend="language.operators">binären, arithmetischen</link>,
  Array-Vereinigungs- und Zeichenketten-Operatoren, die es erlauben, den Wert
  einer Variablen in einem Ausdruck zu benutzen und dieser anschließend das
  Ergebnis des Ausdrucks als neuen Wert zuzuweisen. Zum Beispiel:
  <example>
   <title>Kombinierte Zuweisungen</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3;
$a += 5; // setzt $a auf den Wert 8, als ob wir geschrieben hätten: $a = $a + 5;
$b = "Hallo ";
$b .= "Du!"; // setzt $b auf den Wert "Hallo Du!", äquivalent zu

var_dump($a, $b);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Man beachte, dass die Zuweisung nur den Wert der Ursprungsvariable der neuen
  Variable zuweist (Zuweisung als Wert, sie "kopiert"), weshalb sich
  Änderungen an der einen Variable nicht auf die andere auswirken werden. Das
  kann wichtig sein, wenn man ein großes Array o. ä. in einer Schleife
  kopieren muss.
 </para>
 <para>
  Eine Ausnahme vom üblichen Wertzuweisungsverhalten in PHP stellen Objekte
  (<type>object</type>) dar, die per Referenz zugewiesen werden. Objekte
  können mit dem
  <link linkend="language.oop5.cloning">clone</link>-Schlüsselwort explizit
  kopiert werden.
 </para>

 <sect2 xml:id="language.operators.assignment.reference">
  <title>Referenzzuweisung</title>
  <para>
   Referenzzuweisung wird ebenfalls unterstützt, unter Verwendung der
   "<computeroutput>$var = &amp;$othervar;</computeroutput>" Syntax.
   Referenzzuweisung bedeutet, dass beide Variablen schließlich auf dieselben
   Daten zeigen, und nichts kopiert wurde.
  </para>
  <para>
   <example>
    <title>Referenzzuweisung</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = 3;
$b = &$a; // $b ist eine Referenz auf $a

print "$a\n"; // gibt 3 aus
print "$b\n"; // gibt 3 aus

$a = 4; // ändere $a

print "$a\n"; // gibt 4 aus
print "$b\n"; // gibt ebenfalls 4 aus, da $b eine Referenz auf $a ist, das
              // geändert wurde
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Der <link linkend="language.oop5.basic.new">new</link>-Operator gibt
   automatisch eine Referenz zurück, sodass das Zuweisen des Ergebnisses von
   <link linkend="language.oop5.basic.new">new</link> per Referenz ein Fehler
   ist.
  </para>
  <para>
   <example>
    <title>new-Operator per Referenz</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {}

$o = &new C;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Parse error: syntax error, unexpected token ";", expecting "("
]]>
    </screen>
   </example>
  </para>
  <para>
   Weitere Informationen zu Referenzen und ihren Anwendungsmöglichkeiten
   sind dem Handbuch-Abschnitt
   <link linkend="language.references">Referenzen erklärt</link> zu entnehmen.
  </para>
 </sect2>

 <sect2 xml:id="language.operators.assignment.arithmetic">
  <title>Arithmetische Zuweisungsoperatoren</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Beispiel</entry>
      <entry>Entsprechung</entry>
      <entry>Operation</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>$a += $b</entry>
      <entry>$a = $a + $b</entry>
      <entry>Addition</entry>
     </row>
     <row>
      <entry>$a -= $b</entry>
      <entry>$a = $a - $b</entry>
      <entry>Subtraktion</entry>
     </row>
     <row>
      <entry>$a *= $b</entry>
      <entry>$a = $a * $b</entry>
      <entry>Multiplikation</entry>
     </row>
     <row>
      <entry>$a /= $b</entry>
      <entry>$a = $a / $b</entry>
      <entry>Division</entry>
     </row>
     <row>
      <entry>$a %= $b</entry>
      <entry>$a = $a % $b</entry>
      <entry>Modulus</entry>
     </row>
     <row>
      <entry>$a **= $b</entry>
      <entry>$a = $a ** $b</entry>
      <entry>Potenzierung</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

 <sect2 xml:id="language.operators.assignment.bitwise">
  <title>Bitweise Zuweisungsoperatoren</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Beispiel</entry>
      <entry>Entsprechung</entry>
      <entry>Operation</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>$a &amp;= $b</entry>
      <entry>$a = $a &amp; $b</entry>
      <entry>Und</entry>
     </row>
     <row>
      <entry>$a |= $b</entry>
      <entry>$a = $a | $b</entry>
      <entry>Oder</entry>
     </row>
     <row>
      <entry>$a ^= $b</entry>
      <entry>$a = $a ^ $b</entry>
      <entry>Xor</entry>
     </row>
     <row>
      <entry>$a &lt;&lt;= $b</entry>
      <entry>$a = $a &lt;&lt; $b</entry>
      <entry>Linksverschiebung</entry>
     </row>
     <row>
      <entry>$a &gt;&gt;= $b</entry>
      <entry>$a = $a &gt;&gt; $b</entry>
      <entry>Rechtsverschiebung</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

 <sect2 xml:id="language.operators.assignment.other">
  <title>Andere Zuweisungspperatoren</title>
  <informaltable>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>Beispiel</entry>
      <entry>Entsprechung</entry>
      <entry>Operation</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>$a .= $b</entry>
      <entry>$a = $a . $b</entry>
      <entry>Stringverknüpfung</entry>
     </row>
     <row>
      <entry>$a ??= $b</entry>
      <entry>$a = $a ?? $b</entry>
      <entry>Null-Zusammenführungsoperator</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>

 <sect2 role="seealso" xml:id="language.operators.assignment.see-also">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="language.operators.arithmetic">Arithmetische Operatoren</link></member>
    <member><link linkend="language.operators.bitwise">Bit-Operatoren</link></member>
    <member><link linkend="language.operators.comparison.coalesce">Null-Koaleszenz-Operator</link></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
