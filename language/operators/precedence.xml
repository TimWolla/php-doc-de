<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: e4b889a3e8b9d87ab605aac9bbe85d2c16c69a1b Reviewer: samesch -->
<!-- CREDITS: tzwenny, betz -->
<sect1 xml:id="language.operators.precedence">
 <title>Operator-Rangfolge</title>
 <titleabbrev>Operator-Rangfolge</titleabbrev>
 <para>
  Die Operator-Rangfolge legt fest, wie "eng" ein Operator zwei Ausdrücke
  miteinander verbindet. Zum Beispiel ist das Ergebnis des Ausdruckes
  <literal>1 + 5 * 3</literal> <literal>16</literal> und nicht
  <literal>18</literal>, da der Multiplikations-Operator ("*") in der
  Rangfolge höher steht als der Additions-Operator ("+"). Wenn nötig, können
  Sie Klammern setzen, um die Rangfolge der Operatoren zu beeinflussen. Zum
  Beispiel ergibt: <literal>(1 + 5) * 3</literal> <literal>18</literal>.
 </para>
 <para>
  Haben Operatoren die gleiche Rangfolge, dann entscheidet ihre Assoziativität
  wie die Operatoren gruppiert werden. Zum Beispiel ist "-" links-assoziativ,
  sodass <literal>1 - 2 - 3</literal> als <literal>(1 - 2) - 3</literal>
  gruppiert und zu <literal>-4</literal> ausgewertet wird. Andererseits ist
  "=" rechts-assoziativ, sodass <literal>$a = $b = $c</literal> als
  <literal>$a = ($b = $c)</literal> gruppiert wird.
 </para>
 <para>
  Operatoren gleicher Rangfolge, die nicht-assoziativ sind, können nicht
  nebeneinander verwendet werden; beispielsweise ist <literal>1 &lt; 2 &gt;
  1</literal> in PHP nicht erlaubt. Der Ausdruck <literal>1 &lt;= 1 ==
  1</literal> ist allerdings erlaubt, weil der Operator <literal>==</literal>
  eine niedrigere Rangfolge als der Operator <literal>&lt;</literal> hat.
 </para>
 <para>
  Assoziativität ist nur für binäre (und ternäre) Operatoren sinnvoll. Unäre
  Operatoren sind entweder Präfix oder Postfix, sodass dieser Begriff nicht
  anwendbar ist. Zum Beispiel kann <literal>!!$a</literal> nur als
  <literal>!(!$a)</literal> gruppiert werden.
 </para>
 <para>
  Die Verwendung von Klammern, auch wenn sie nicht unbedingt erforderlich
  sind, kann oft die Lesbarkeit des Codes verbessern, indem explizit gruppiert
  wird, statt sich auf die implizite Operator-Rangfolge und -Assoziativität zu
  verlassen.
 </para>
 <para>
  Die folgende Tabelle zeigt die Rangfolge der Operatoren, oben steht der
  Operator mit dem höchsten Rang. Operatoren in derselben Zeile haben die
  gleiche Rangfolge, sodass ihre Assoziativität die Gruppierung entscheidet.
  <table>
   <title>Operator-Rangfolge</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Assoziativität</entry>
      <entry>Operatoren</entry>
      <entry>Additional Information</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(n. z.)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry>
       <link linkend="language.oop5.cloning">clone</link> und
       <link linkend="language.oop5.basic.new">new</link>
      </entry>
     </row>
     <row>
      <entry>rechts</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">arithmetisch</link></entry>
     </row>
     <row>
      <entry>(n. z.)</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">arithmetisch</link> (unär
       <literal>+</literal> und <literal>-</literal>),
       <link linkend="language.operators.increment">inkrementell/dekrementell</link>,
       <link linkend="language.operators.bitwise">bitweise</link>,
       <link linkend="language.types.typecasting">Typumwandlung</link>&listendand;
       <link linkend="language.operators.errorcontrol">Fehlerkontrolle</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">Typ</link>
      </entry>
     </row>
     <row>
      <entry>(n. z.)</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logisch</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">arithmetisch</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">arithmetisch</link>
       (binär <literal>+</literal> und <literal>-</literal>),
       <link linkend="language.operators.array">Array</link>&listendand;
       <link linkend="language.operators.string">Zeichenkette</link>
       (<literal>.</literal> vor PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">bitweise</link>
      </entry>
     </row>
     <row>
      <entry>left</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">Zeichenkette</link>
       (seit PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>non-associative</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">Vergleiche</link>
      </entry>
     </row>
     <row>
      <entry>nicht-assoziativ</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">Vergleiche</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitweise</link>&listendand;
       <link linkend="language.references">Referenzen</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitweise</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitweise</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logisch</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logisch</link>
      </entry>
     </row>
     <row>
      <entry>rechts</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">NULL-Zusammenfügungsoperator</link>
      </entry>
     </row>
     <row>
      <entry>nicht-assoziativ</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">ternärer Operator</link>
       (vor PHP 8.0.0 links-assoziativ)
      </entry>
     </row>
     <row>
      <entry>rechts</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">Zuweisung</link>
      </entry>
     </row>
     <row>
      <entry>(n. z.)</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(n. z.)</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(n. z.)</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logisch</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logisch</link>
      </entry>
     </row>
     <row>
      <entry>links</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">logisch</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Assoziativität</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
var_dump($a);

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
var_dump($a, $b);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Der ternäre Operator erfordert explizit die Verwendung von Klammern, um
  den Rangfolge zu verdeutlichen.
 </para>
 <para>
  <example>
   <title>Explizite Rangfolge</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = true ? 0 : (true ? 1 : 2);
var_dump($a);

// Dies ist seit PHP 8 nicht mehr erlaubt
// $a = true ? 0 : true ? 1 : 2;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Operator-Rangfolge und -Assoziativität bestimmen nur wie Ausdrücke gruppiert
  werden, aber nicht die Auswertungsreihenfolge. PHP legt (im Allgemeinen)
  nicht fest, in welcher Reihenfolge ein Ausdruck ausgewertet wird. Code, der
  eine bestimmte Auswertungsreihenfolge erwartet, sollte vermieden werden,
  denn das Verhalten kann sich von Version zu Version ändern und auch vom
  umgebenden Code abhängen.
  <example>
   <title>Nicht definierte Auswertungsreihenfolge</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
$a = 1;
echo $a + $a++; // gibt entweder 2 oder 3 aus

$i = 1;
$array[$i] = $i++; // der Index ist entweder 1 oder 2
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Die Rangfolge von <literal>+</literal>, <literal>-</literal> und <literal>.</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
$x = 4;
// diese Zeile könnte eine unerwartete Ausgabe produzieren:
echo "x minus 1 ist gleich " . $x-1 . ", hoffe ich jedenfalls\n";

// die gewünschte Rangfolge kann durch die Verwendung von Klammern erzwungen werden:
echo "x minus 1 ist gleich " . ($x-1) . ", hoffe ich jedenfalls\n";

// Dies ist nicht erlaubt und führt zu einem TypeError:
echo (("x minus 1 ist gleich " . $x) - 1) . ", hoffe ich jedenfalls\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, hoffe ich jedenfalls
-1, hoffe ich jedenfalls
Fatal error: Uncaught TypeError: Unsupported operand types: string - int
]]>
   </screen>
  </example>
  <example>
   <title>Vor PHP 8 hatten <literal>+</literal>, <literal>-</literal> und <literal>.</literal> dieselbe Rangfolge</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
$x = 4;
// diese Zeile könnte eine unerwartete Ausgabe produzieren:
echo "x minus 1 ist gleich " . $x-1 . ", hoffe ich jedenfalls\n";

// da es wie diese Zeile ausgewertet wird (vor PHP 8.0.0):
echo (("x minus 1 ist gleich " . $x) - 1) . ", hoffe ich jedenfalls\n";

// die gewünschte Rangfolge kann durch die Verwendung von Klammern erzwungen werden:
echo "x minus 1 ist gleich " . ($x-1) . ", hoffe ich jedenfalls\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, hoffe ich jedenfalls
-1, hoffe ich jedenfalls
x minus 1 ist gleich 3, hoffe ich jedenfalls
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   Obwohl <literal>=</literal> einen niedrigeren Rang als die meisten anderen
   Operatoren hat, erlaubt PHP dennoch Ausdrücke wie den folgenden:
   <literal>if (!$a = foo())</literal>; in diesem Fall wird der Rückgabewert
   von <literal>foo()</literal> der Variablen <varname>$a</varname>
   zugewiesen.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Die Verkettung von Zeichenketten (<literal>.</literal>) hat jetzt eine
       niedrigere Rangfolge als die arithmetische Addition/Subtraktion
       (<literal>+</literal> und <literal>-</literal>) und bitweises
       Verschieben nach links/rechts (<literal>&lt;&lt;</literal> und
       <literal>&gt;&gt;</literal>); vorher hatte sie die gleiche Rangfolge
       wie <literal>+</literal> und <literal>-</literal> und eine höhere
       Rangfolge als <literal>&lt;&lt;</literal> und
       <literal>&gt;&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Der ternäre Operator (<literal>? :</literal>) ist jetzt
       nicht-assoziativ; vorher war er links-assoziativ.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Der Vorrang der String-Verkettung (<literal>.</literal>) gegenüber der
       arithmetischen Addition/Subtraktion (<literal>+</literal> oder
       <literal>-</literal>) oder bitweises Verschieben nach links/rechts
       (<literal>&lt;&lt;</literal> oder <literal>&gt;&gt;</literal>), &dh;
       die gemeinsame Verwendung in einem Ausdruck ohne Klammern, ist
       veraltet.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Die Links-Assoziativität des ternären Operators (<literal>?
       :</literal>), &dh; die Verschachtelung mehrerer ternärer Operatoren,
       die nicht-in Klammern eingeschlossen sind, ist veraltet.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
