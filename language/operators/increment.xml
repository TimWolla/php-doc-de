<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: e4b889a3e8b9d87ab605aac9bbe85d2c16c69a1b Reviewer: samesch -->
<!-- CREDITS: tzwenny, betz -->
<sect1 xml:id="language.operators.increment">
 <title>Inkrement- bzw. Dekrement-Operatoren</title>
 <titleabbrev>Inkrement und Dekrement</titleabbrev>
 <para>
  PHP unterstützt Prä- und Post-Inkrement- und Dekrement-Operatoren.
  Diese unären (einstelligen) Operatoren ermöglichen es, einen Wert um eins zu
  erhöhen oder zu verringern.
 </para>
 <table>
  <title>Inkrement- und Dekrementoperatoren</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Beispiel</entry>
     <entry>Name</entry>
     <entry>Auswirkung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Prä-Inkrementierung</entry>
     <entry>
      Erhöht <varname>$a</varname> um eins und gibt dann
      <varname>$a</varname> zurück.
     </entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-Inkrementierung</entry>
     <entry>
      Gibt <varname>$a</varname> zurück und erhöht <varname>$a</varname>
      dann um eins.
     </entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Prä-Dekrementierung</entry>
     <entry>
      Vermindert <varname>$a</varname> um eins, und gibt dann
      <varname>$a</varname> zurück.
     </entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-Dekrementierung</entry>
     <entry>
      Gibt <varname>$a</varname> zurück, und vermindert
      <varname>$a</varname> dann um eins.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  <example>
   <title>Beispiele für Inkrementierung/Dekrementierung</title>
   <programlisting role="php">
<![CDATA[
<?php
echo "Post-Inkrementierung", PHP_EOL;
$a = 5;
var_dump($a++);
var_dump($a);

echo "Prä-Inkrementierung", PHP_EOL;
$a = 5;
var_dump(++$a);
var_dump($a);

echo "Post-Dekrementierung", PHP_EOL;
$a = 5;
var_dump($a--);
var_dump($a);

echo "Prä-Dekrementierung", PHP_EOL;
$a = 5;
var_dump(--$a);
var_dump($a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Post-Inkrementierung:
int(5)
int(6)
Prä-Inkrementierung:
int(6)
int(6)
Post-Dekrementierung:
int(5)
int(4)
Prä-Dekrementierung:
int(4)
int(4)
]]>
   </screen>
  </example>

  <warning>
   <para>
    Die Inkrement- und Dekrement-Operatoren wirken sich nicht auf Werte vom
    Typ <type>bool</type> aus. Seit PHP 8.3.0 wird ein
    <constant>E_WARNING</constant> ausgegeben, weil der Wert dadurch in
    Zukunft implizit in <type>int</type> umgewandelt wird.
   </para>
   <para>
    Der Dekrement-Operator wirkt sich nicht auf Werte vom
    Typ <type>null</type> aus. Seit PHP 8.3.0 wird ein
    <constant>E_WARNING</constant> ausgegeben, weil der Wert dadurch in
    Zukunft implizit in <type>int</type> umgewandelt wird.
   </para>
   <para>
    Der Dekrement-Operator wirkt sich nicht auf
    nicht-<link linkend="language.types.numeric-strings">numerische Zeichenketten</link>.
    aus Seit PHP 8.3.0 wird ein <constant>E_WARNING</constant> ausgegeben,
    weil in Zukunft ein <classname>TypeError</classname> geworfen wird.
   </para>
  </warning>
  <note>
   <para>
    Interne Objekte, die das Überladen von Addition und/oder Subtraktion
    unterstützen, können ebenfalls inkrementiert und/oder dekrementiert
    werden. Ein solches internes Objekt ist <classname>GMP</classname>.
   </para>
  </note>
 </para>

 <sect2 xml:id="language.operators.increment.string">
  <title>Inkrementieren von Zeichenketten im PERL-Stil</title>
  <warning>
   <simpara>
    Diese Funktionalität ist seit PHP 8.3.0 veraltet (soft-deprecated).
    Stattdessen sollte die Funktion <function>str_increment</function>
    verwendet werden.
   </simpara>
  </warning>
  <para>
   In PHP ist es möglich, eine
   nicht-<link linkend="language.types.numeric-strings">numerische Zeichenkette</link>
   zu inkrementieren, sofern es sich um eine alphanumerische ASCII-Zeichenkette
   handelt. Dabei werden die Buchstaben bis zum nächsten Buchstaben
   hochgezählt, und bei Erreichen des Buchstabens <literal>Z</literal> wird die
   Inkrementierung auf den Wert auf der linken Seite übertragen. Beispielsweise
   verwandelt <code>$a = 'Z'; $a++;</code> <varname>$a</varname> in
   <literal>'AA'</literal>.
  </para>
  <example>
   <title>Beispiel für die Inkrementierung von Zeichenketten im PERL-Stil</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Zeichenketten aus Buchstaben ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Alphanumerische Zeichenketten verhalten sich anders
echo '== Alphanumerische Zeichenketten ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Zeichenketten aus Buchstaben ==
X
Y
Z
AA
AB
AC
== Alphanumerische Zeichenketten ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
  <warning>
   <para>
    Wenn eine alphanumerische Zeichenkette als
    <link linkend="language.types.numeric-strings">numerische Zeichenkette</link>
    interpretiert werden kann, wird sie in den Typ <type>int</type> oder
    <type>float</type> umgewandelt. Dies ist vor allem bei Zeichenketten ein
    Problem, die aussehen wie Gleitkommazahlen in Exponentialschreibweise. Die
    Funktion <function>str_increment</function> nimmt diese impliziten
    Typumwandlungen nicht vor.
   </para>
   <example>
    <title>Umwandlung einer alphanumerischen Zeichenkette in eine Gleitkommazahl</title>
    <programlisting role="php">
<![CDATA[
<?php
$s = "5d9";
var_dump(++$s);
var_dump(++$s);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "5e0"
float(6)
]]>
    </screen>
    <para>
     Das liegt daran, dass der Wert <literal>"5e0"</literal> als
     <type>float</type> interpretiert und in den Wert <literal>5.0</literal>
     umgewandelt wird, bevor er inkrementiert wird.
    </para>
   </example>
  </warning>
 </sect2>
</sect1>
