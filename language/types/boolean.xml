<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: hholzgra  Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 346c0bd13f99888108cbefeb9c7c17923cac1a47 Reviewer: samesch -->
<sect1 xml:id="language.types.boolean">
 <title>Booleans</title>

 <simpara>
  Der Typ <type>bool</type> kann nur zwei Werte annehmen und wird verwendet,
  um einen Wahrheitswert auszudrücken; er kann entweder &true; (wahr) oder
  &false; (falsch) sein.
 </simpara>

 <sect2 xml:id="language.types.boolean.syntax">
  <title>Syntax</title>
  <para>
   Ein <type>bool</type>-Wert wird über die Konstanten &true; und &false;
   spezifiziert, Groß- und Kleinschreibung ist dabei nicht von Bedeutung.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = True; // weist $foo den Wert TRUE zu
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Normalerweise wird ein <type>bool</type> von einem
   <link linkend="language.operators">Operator</link> zurückgegeben und an
   eine <link linkend="language.control-structures">Kontrollstruktur</link>
   weitergegeben.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// == ist ein Operator, der auf Gleichheit prüft
// und ein boolean-Ergebnis zurückgibt
if ($action == "show_version") {
    echo "Die Version ist 1.23";
}

// die Angabe von '== TRUE' ist nicht nötig...
if ($show_separators == TRUE) {
    echo "<hr>\n";
}

// ... weil folgendes genau dieselbe Bedeutung hat:
if ($show_separators) {
    echo "<hr>\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.boolean.casting">
  <title>Umwandlung in Boolean</title>

  <simpara>
   Um einen Wert explizit in <type>bool</type> zu konvertieren, kann der
   <literal>(bool)</literal>-Cast verwendet werden. Im Allgemeinen ist dies
   nicht notwendig, da ein Wert, wenn er in einem logischen Kontext verwendet
   wird, automatisch als ein Wert vom Typ <type>bool</type> interpretiert
   wird. Für weitere Informationen siehe die Seite
   <link linkend="language.types.type-juggling">Typumwandlungen</link>.
  </simpara>

  <para>
   Bei der Konvertierung zum Typ <type>bool</type> gelten die folgenden
   Werte als &false;:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Der <link linkend="language.types.boolean">Boolean</link> &false; selbst
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Der <link linkend="language.types.integer">Integer</link>
     <literal>0</literal> (null)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Die <link linkend="language.types.float">Gleitkommazahlen</link>
     <literal>0.0</literal> und <literal>-0.0</literal> (null)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Der leere <link linkend="language.types.string">String</link>
     <literal>""</literal> und der
     <link linkend="language.types.string">String</link> <literal>"0"</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Ein <link linkend="language.types.array">Array</link> ohne Elemente
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Der Einheitstyp <link linkend="language.types.null">NULL</link>
     (inklusive nicht gesetzter Variablen)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Interne Objekte, die ihr Casting-Verhalten auf bool überladen, zum
     Beispiel: <link linkend="ref.simplexml">SimpleXML</link>-Objekte, die aus
     leeren Elementen ohne Attribute erstellt werden.
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   Jeder andere Wert wird als &true; angenommen (inklusive
   <link linkend="language.types.resource">Ressourcen</link> und
   <constant>NAN</constant>).
  </para>

  <warning>
   <simpara>
    <literal>-1</literal> gilt als &true; wie jeder andere Integerwert
    ungleich 0 (egal ob positiv oder negativ)!
   </simpara>
  </warning>

  <example>
   <title>Umwandlung in Boolean</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) "0");       // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>
]]>
   </programlisting>
  </example>

 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
