<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: simp Status: ready -->
<!-- Reviewed: no -->
<!-- Credits: wiesemann -->
 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Klassenabstraktion</title>

  <para>
   PHP unterstützt abstrakte Klassen und Methoden. Abstrakt definierte Klassen
   können nicht instantiiert werden. Jede Klasse, die wenigstens eine abstrakte
   Methode oder Eigenschaft enthält, muss ebenso abstrakt sein. Als abstrakt
   definierte Methoden deklarieren nur die Signatur der Methode und ob sie
   öffenlich oder geschützt ist - sie können nicht die Implementierung
   definieren. Als abstrakt definierte Eigenschaften können eine Anforderung
   für das Verhalten von <literal>get</literal> oder <literal>set</literal>
   deklarieren und eine Implementierung für eine, aber nicht für beide
   Operationen bereitstellen.
  </para>

  <para>
   Wenn von einer abstrakten Klasse abgeleitet wird, müssen alle in der Deklaration
   der Elternklasse als abstrakt bezeichneten Methoden durch das Kind definiert
   werden und den üblichen Regeln zur
   <link linkend="language.oop5.inheritance">Vererbung</link> und
   <link linkend="language.oop.lsp">Signatur-Kompatibilität</link> folgen.
  </para>

  <simpara>
   Seit PHP 8.4 kann eine abstrakte Klasse eine abstrakte Eigenschaft
   deklarieren, die entweder öffenlich oder geschützt ist.
   Eine abstrakte Eigenschaft, die geschützt ist, kann durch eine Eigenschaft
   erfüllt werden, die entweder vom geschützten oder vom öffenlichen
   Geltungsbereich aus lesbar/schreibbar ist
  </simpara>
  <simpara>
   Eine abstrakte Eigenschaft kann entweder durch eine Standardeigenschaft oder
   durch eine Eigenschaft mit definierten
   <link linkend="language.oop5.property-hooks">Hooks</link> erfüllt werden,
   die der erforderlichen Operation entspricht.
  </simpara>

  <example>
   <title>Beispiel für eine abstrakte Methode</title>
   <programlisting role="php">
<![CDATA[
<?php

abstract class AbstractClass
{
    // Die abgeleitete Klasse zwingen, diese Methoden zu definieren
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // Gemeinsame Methode
    public function printOut()
    {
        print $this->getValue() . "\n";
    }
}

class ConcreteClass1 extends AbstractClass
{
    protected function getValue()
    {
        return "ConcreteClass1";
    }

    public function prefixValue($prefix)
    {
        return "{$prefix}ConcreteClass1";
    }
}

class ConcreteClass2 extends AbstractClass
{
    public function getValue()
    {
        return "ConcreteClass2";
    }

    public function prefixValue($prefix)
    {
        return "{$prefix}ConcreteClass2";
    }
}

$class1 = new ConcreteClass1();
$class1->printOut();
echo $class1->prefixValue('FOO_'), "\n";

$class2 = new ConcreteClass2();
$class2->printOut();
echo $class2->prefixValue('FOO_'), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>
  </example>

  <example>
   <title>Beispiel für eine abstrakte Methode</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class AbstractClass
{
    // Eine abstrakte Methode muss nur die verpflichtenden Parameter definieren
    abstract protected function prefixName($name);
}

class ConcreteClass extends AbstractClass
{
    // Eine Kindklasse kann optionale Parameter definieren, die sich nicht in der
    // Signatur der Elternklasse wiederfinden
    public function prefixName($name, $separator = ".")
    {
        if ($name == "Pacman") {
            $prefix = "Mr";
        } elseif ($name == "Pacwoman") {
            $prefix = "Mrs";
        } else {
            $prefix = "";
        }

        return "{$prefix}{$separator} {$name}";
    }
}

$class = new ConcreteClass();
echo $class->prefixName("Pacman"), "\n";
echo $class->prefixName("Pacwoman"), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Mr. Pacman
Mrs. Pacwoman
]]>
   </screen>
  </example>
  <example>
   <title>Beispiel für eine abstrakte Eigenschaft</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    // Erweiternde Klassen müssen eine öffentlich lesbare Eigenschaft haben
    abstract public string $readable {
        get;
    }

    // Erweiternde Klassen müssen eine geschützt oder öffentlich schreibbare
    // Eigenschaft haben
    abstract protected string $writeable {
        set;
    }

    // Erweiternde Klassen müssen eine geschützte oder öffentliche symmetrische
    // Eigenschaft haben
    abstract protected string $both {
        get;
        set;
    }
}

class C extends A
{
    // Dies erfüllt die Anforderung und macht sie außerdem einstellbar, was
    // gültig ist
    public string $readable;

    // Dies würde die Anforderung NICHT erfüllen, da sie nicht öffentlich
    // lesbar ist
    protected string $readable;

    // Dies erfüllt die Anforderung genau, ist also ausreichend.
    // Es darf nur geschrieben werden, und zwar nur aus dem geschützten Bereich
    protected string $writeable {
        set => $value;
    }

    // Dies erweitert die Sichtbarkeit von geschützt auf öffentlich, was in
    // Ordnung ist
    public string $both;
}

?>
]]>
   </programlisting>
  </example>
  <simpara>
   Eine abstrakte Eigenschaft einer abstrakten Klasse kann Implementierungen
   für jeden Hook bereitstellen, muss aber entweder <literal>get</literal> oder
   <literal>set</literal> deklariert, aber nicht definiert haben (wie im obigen
   Beispiel).
  </simpara>
  <example>
   <title>Beispiel für eine abstrakte Eigenschaft mit Hooks</title>
   <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    // Dies bietet eine vorgegebene (aber überschreibbare) set-Implementierung
    // und erfordert, dass Kindklassen eine get-Implementierung bereitstellen
    abstract public string $foo {
        get;

        set {
            $this->foo = $value;
        }
    }
}

?>
 ]]>
   </programlisting>
  </example>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
