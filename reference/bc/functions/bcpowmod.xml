<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c7e83fbbbcde9f54affc09424d032c38492a3ff4 Maintainer: sammywg Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.bcpowmod" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>bcpowmod</refname>
  <refpurpose>Potenz einer Zahl beliebiger Genauigkeit, vermindert um ein
   angegebenen Modulo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>bcpowmod</methodname>
   <methodparam><type>string</type><parameter>num</parameter></methodparam>
   <methodparam><type>string</type><parameter>exponent</parameter></methodparam>
   <methodparam><type>string</type><parameter>modulus</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>scale</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Benutzen Sie diese schnelle Exponentialmethode, um
   <parameter>num</parameter> mit <parameter>exponent</parameter>
   unter Berücksichtigung des Modulo <parameter>modulus</parameter> zu
   potenzieren.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>num</parameter></term>
     <listitem>
      <para>
       Der Basis als ganzzahlige Zeichenkette (&dh; ohne Nachkommastellen).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exponent</parameter></term>
     <listitem>
      <para>
       Der Exponent als nicht-negative, ganzzahlige Zeichenkette (&dh; ohne
       Nachkommastellen).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>modulus</parameter></term>
     <listitem>
      <para>
       Der Modulus als ganzzahlige Zeichenkette (&dh; ohne Nachkommastellen).
      </para>
     </listitem>
    </varlistentry>
    &bc.scale.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt das Ergebnis als Zeichenkette zurück.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   In den folgenden Fällen löst diese Funktion einen
   <exceptionname>ValueError</exceptionname> aus:
   <simplelist>
    <member><parameter>num</parameter>, <parameter>exponent</parameter> oder <parameter>modulus</parameter> ist keine wohlgeformte numerische BCMath-Zeichenkette</member>
    <member><parameter>num</parameter>, <parameter>exponent</parameter> oder <parameter>modulus</parameter> hat eine Nachkommastelle</member>
    <member><parameter>exponent</parameter> ist ein negativer Wert</member>
    <member><parameter>scale</parameter> liegt außerhalb des gültigen Bereichs</member>
   </simplelist>
  </para>
  <simpara>
   Wenn <parameter>modulus</parameter> <literal>0</literal> ist, löst diese
   Funktion eine <exceptionname>DivisionByZeroError</exceptionname>-Exception
   aus.
  </simpara>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>scale</parameter> ist jetzt nullbar.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Nun wird ein <exceptionname>ValueError</exceptionname> ausgelöst,
       anstatt &false; zurückzugeben, wenn <parameter>exponent</parameter> ein
       negativer Wert ist.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Dividieren durch <literal>0</literal> löst nun eine
       <exceptionname>DivisionByZeroError</exceptionname>-Exception aus,
       anstatt &false; zurückzugeben.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Die folgenden zwei Anweisungen sind funktional identisch.  Die
   <function>bcpowmod</function>-Version ist allerdings schneller und
   akzeptiert größere Parameter.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = bcpowmod($x, $y, $mod);

$b = bcmod(bcpow($x, $y), $mod);

// $a und $b entsprechen einander.

?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Da diese Methode mit der Modulo-Operation arbeitet, können nicht-positive
    Ganzzahlen zu unerwarteten Ergebnissen führen.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>bcpow</function></member>
    <member><function>bcmod</function></member>
    <member><methodname>BcMath\Number::powmod</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
