<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5bc68add3da3cd18c40f851e944b15095d3a26aa Maintainer: nobody Status: ready -->
<refentry xml:id="function.openssl-sign" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_sign</refname>
  <refpurpose>Erzeugt eine Signatur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>openssl_sign</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter role="reference">signature</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type class="union"><type>OpenSSLAsymmetricKey</type><type>OpenSSLCertificate</type><type>array</type><type>string</type></type><parameter>private_key</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>string</type><type>int</type></type><parameter>algorithm</parameter><initializer><constant>OPENSSL_ALGO_SHA1</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Die Funktion <function>openssl_sign</function> errechnet die Signatur für
   die im Parameter <parameter>data</parameter> angegebenen Daten, indem sie
   unter Verwendung des privaten Schlüssels <parameter>private_key</parameter>
   eine kryptographische digitale Signatur erzeugt. Es ist zu beachten, dass
   die Daten selbst nicht verschlüsselt werden.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Die zu verschlüsselnden Daten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signature</parameter></term>
     <listitem>
      <para>
       Nach erfolgreicher Ausführung wird die Signatur im Parameter
       <parameter>signature</parameter> zurückgegeben.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>private_key</parameter></term>
     <listitem>
      <para>
       <classname>OpenSSLAsymmetricKey</classname> - ein von
       <function>openssl_get_privatekey</function> zurückgegebener Schlüssel.
      </para>
      <para>
       <type>string</type> - ein Schlüssel im <acronym>PEM</acronym>-Format.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>algorithm</parameter></term>
     <listitem>
      <para>
       <type>int</type> - einer dieser
       <link linkend="openssl.signature-algos">Signatur-Algorithmen</link>.
      </para>
      <para>
       <type>string</type> - eine von
       <function>openssl_get_md_methods</function> zurückgegebene gültige
       Zeichenkette, beispielsweise "sha256WithRSAEncryption" oder "sha384".
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>private_key</parameter> akzeptiert nun eine
       <classname>OpenSSLAsymmetricKey</classname>- oder
       <classname>OpenSSLCertificate</classname>-Instanz; vorher wurde eine
       &resource; vom Typ <literal>OpenSSL-Schlüssel</literal> oder
       <literal>OpenSSL X.509</literal> akzeptiert.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>openssl_sign</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Annahme: $data enthält die Daten, die signiert werden sollen

// holen und vorbereiten des privaten Schlüssels aus einer Datei
$pkeyid = openssl_pkey_get_private("file://src/openssl-0.9.6/demos/sign/key.pem");

// errechnen der Signatur
openssl_sign($data, $signature, $pkeyid);

// löschen des Schlüssels aus dem Speicher
openssl_free_key($pkeyid);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title><function>openssl_sign</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// die zu verschlüssenlnden Daten
$data = 'my data';

// erzeuge einen neuen privaten und öffentlichen Schlüssel
$new_key_pair = openssl_pkey_new(array(
    "private_key_bits" => 2048,
    "private_key_type" => OPENSSL_KEYTYPE_RSA,
));
openssl_pkey_export($new_key_pair, $private_key_pem);

$details = openssl_pkey_get_details($new_key_pair);
$public_key_pem = $details['key'];

// erzeuge die Signatur
openssl_sign($data, $signature, $private_key_pem, OPENSSL_ALGO_SHA256);

// für spätere Verwendung speichern
file_put_contents('private_key.pem', $private_key_pem);
file_put_contents('public_key.pem', $public_key_pem);
file_put_contents('signature.dat', $signature);

// Signatur überprüfen
$r = openssl_verify($data, $signature, $public_key_pem, "sha256WithRSAEncryption");
var_dump($r);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_verify</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
