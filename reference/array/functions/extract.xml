<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d58ee8eaaa7f716c51f66f5f1058ab3c42376d98 Maintainer: wiesemann Status: ready -->
<!-- CREDITS: tom -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Importiert Variablen eines Arrays in die aktuelle Symboltabelle</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>EXTR_OVERWRITE</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Importiert Variablen eines Arrays in die aktuelle
   <link linkend="features.gc.refcounting-basics">Symboltabelle</link>.
  </para>
  <para>
   Jeder Schlüssel wird geprüft, ob er einen gültigen Variablennamen ergibt
   und ob es Kollisionen mit existierenden Variablen in der Symboltabelle
   gibt.
  </para>
  <warning>
   <para>
    Verwenden Sie <function>extract</function> nicht für nicht
    vertrauenswürdige Daten wie Benutzereingaben (&zb;
    <varname>$_GET</varname>, <varname>$_FILES</varname>).
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Ein assoziatives Array. Die Funktion behandelt Schlüssel als
       Variablennamen und Werte als Variablenwerte. Für jedes Paar
       Schlüssel/Wert wird - abhängig von den Parametern
       <parameter>flags</parameter> und <parameter>prefix</parameter> - eine
       Variable in der aktuellen Symboltabelle eingetragen.
      </para>
      <para>
       Sie müssen ein assoziatives Array verwenden, da ein numerisch
       indiziertes Array zu keinem Ergebnis führt, außer Sie verwenden
       <constant>EXTR_PREFIX_ALL</constant> oder
       <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Die Art, wie ungültige/numerische Schlüssel und Kollisionen behandelt
       werden, wird durch <parameter>flags</parameter> bestimmt. Die folgenden
       Werte sind erlaubt:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           Im Falle einer Kollision wird die existierende Variable
           überschrieben.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           Im Falle einer Kollision wird die existierende Variable nicht
           überschrieben.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>
           Im Falle einer Kollision wird dem Variablennamen
           <parameter>prefix</parameter> vorangestellt.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Allen Variablennamen wird <parameter>prefix</parameter>
           vorangestellt.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Nur ungültigen/numerischen Variablennamen wird
           <parameter>prefix</parameter> vorangestellt.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Überschreibt die Variable nur, wenn sie bereits in der aktuellen
           Symboltabelle existiert, sonst geschieht nichts. Dies ist dann
           hilfreich, wenn Sie eine Liste mit gültigen Variablen definieren,
           und dann &zb; nur jene Variablen extrahieren, welche Sie aus
           <varname>$_REQUEST</varname> definiert haben.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Erstellt nur Variablennamen mit Präfix, wenn die Version ohne
           Präfix der selben Variable in der aktuellen Symboltabelle
           existiert.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Extrahiert Variablen als Referenzen. Das heißt, dass die Werte der
           importierten Variablen immer noch die Werte des Parameters
           <parameter>array</parameter> referenzieren. Sie können dieses Flag
           alleine oder auch in Kombination mit einem anderen Flag verwenden,
           indem Sie die <parameter>flags</parameter> mit OR verknüpfen.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Ist <parameter>flags</parameter> nicht angegeben, so wird
       <constant>EXTR_OVERWRITE</constant> angenommen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Beachten Sie, dass <parameter>prefix</parameter> nur dann nötig ist,
       wenn <parameter>flags</parameter>
       <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>,
       <constant>EXTR_PREFIX_INVALID</constant> oder
       <constant>EXTR_PREFIX_IF_EXISTS</constant> ist. Ist das Resultat trotz
       Präfix kein gültiger Variablenname, wird es nicht in die Symboltabelle
       importiert. Präfixe werden automatisch mit einem Unterstrich vom
       Schlüssel des Arrays getrennt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>extract</function> gibt die Anzahl der erfolgreich in die
   Symboltabelle importierten Variablen zurück.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>extract</function>-Beispiel</title>
    <para>
     Eine mögliche Verwendung für <function>extract</function> ist, Variablen
     in die Symboltabelle zu importieren, die in einem von
     <function>wddx_deserialize</function> zurückgegebenen assoziativen Array
     enthalten sind.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Annahme: $var_array ist ein von wddx_deserialize
   zurückgegebenes Array */

$groesse = "groß";
$var_array = array(
    "farbe"   => "blau",
    "groesse" => "mittel",
    "form"    => "Kugel"
);

extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$farbe, $groesse, $form, $wddx_groesse\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blau, groß, Kugel, mittel
]]>
    </screen>
    <para>
     <varname>$groesse</varname> wurde nicht überschrieben, da wir
     <constant>EXTR_PREFIX_SAME</constant> angegeben haben. Das führte dazu,
     dass <varname>$wddx_groesse</varname> erstellt wurde. Mit der Angabe
     <constant>EXTR_SKIP</constant> wäre <varname>$wddx_groesse</varname>
     nicht erstellt worden. <constant>EXTR_OVERWRITE</constant> hätte
     <varname>$groesse</varname> mit dem Wert "mittel" überschrieben, und
     <constant>EXTR_PREFIX_ALL</constant> hätte die neuen Variablen
     <varname>$wddx_farbe</varname>, <varname>$wddx_groesse</varname>, und
     <varname>$wddx_form</varname> erstellt.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Verwenden Sie <function>extract</function> nicht für nicht
    vertrauenswürdige Daten wie Benutzereingaben (&dh;
    <varname>$_GET</varname>, <varname>$_FILES</varname>, ...). Wenn Sie das
    tun, stellen Sie sicher, dass Sie einen der nicht überschreibenden
    <parameter>flags</parameter>-Werte wie &zb; <constant>EXTR_SKIP</constant>
    verwenden und beachten Sie, dass Sie die Daten in der selben Reihenfolge
    extrahieren müssen, die in <link
    linkend="ini.variables-order">variables_order</link> in der <link
    linkend="ini">&php.ini;</link> angegeben wurde.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
