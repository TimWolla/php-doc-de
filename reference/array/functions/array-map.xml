<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2e60c5134e7a847c99f81eb3f7ecee1f5efeeace Maintainer: wiesemann Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: d042804100d34f5389fe122b0e1cd41087fd94ba Reviewer: samesch -->
<!-- CREDITS: tom -->
<refentry xml:id="function.array-map" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_map</refname>
  <refpurpose>Wendet eine Callback-Funktion auf die Elemente von Arrays an</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_map</methodname>
   <methodparam><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>array</parameter></methodparam>
   <methodparam rep="repeat"><type>array</type><parameter>arrays</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_map</function> gibt ein &array; zurück, das die Ergebnisse
   der Anwendung der Callback-Funktion <parameter>callback</parameter> auf den
   entsprechenden Wert von <parameter>array</parameter> (und
   <parameter>arrays</parameter>, wenn weitere Arrays angegeben wurden) als
   Callback-Argumente enthält. Die Anzahl Parameter, welche
   <parameter>callback</parameter> akzeptiert, sollte der Anzahl der an
   <function>array_map</function> übergebenen Arrays entsprechen. Überzählige
   Eingabe-Arrays werden ignoriert. Wenn eine zu geringe Anzahl von Argumenten
   übergeben wird, wird ein <classname>ArgumentCountError</classname>-Fehler
   ausgelöst.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Ein <type>callable</type>, das für jedes Element in jedem Array
       aufgerufen werden soll.
      </para>
      <para>
       &null; kann als Wert an <parameter>callback</parameter> übergeben
       werden, um eine zip-Operation auf mehrere Arrays durchzuführen und ein
       Array zurückzugeben, dessen Elemente jeweils ein Array sind, das die
       Elemente der Eingabe-Arrays mit demselben Index enthält (siehe Beispiel
       unten). Wird nur <parameter>array</parameter> übergeben, gibt
       <methodname>array_map</methodname> das Eingabe-Array zurück.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Ein Array, auf das die <parameter>callback</parameter>-Funktion
       angewendet werden soll.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arrays</parameter></term>
     <listitem>
      <para>
       Zusätzliche variable Liste von Array-Argumenten, auf die die
       <parameter>callback</parameter>-Funktion angewendet werden soll.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>array_map</function> gibt ein Array zurück, das die Ergebnisse
   der Anwendung der <parameter>callback</parameter>-Funktion auf den
   entsprechenden Wert von <parameter>array</parameter> (und
   <parameter>arrays</parameter>, wenn weitere Arrays angegeben wurden) als
   Callback-Argumente enthält.
  </para>
  <para>
   Das zurückgegebene Array behält die Schlüssel des Array-Arguments nur bei,
   wenn genau ein Array übergeben wurde. Wird mehr als ein Array übergeben,
   hat das zurückgegebene Array aufeinanderfolgende Integer-Schlüssel.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &array.changelog.by-ref;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_map</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function cube($n)
{
    return ($n * $n * $n);
}

$a = [1, 2, 3, 4, 5];
$b = array_map('cube', $a);
print_r($b);
?>
]]>
    </programlisting>
    <para>
     Dies speichert in <varname>$b</varname>:
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function> mit einer Lambda-Funktion</title>
    <programlisting role="php">
<![CDATA[
<?php
$func = function(int $value): int {
    return $value * 2;
};

print_r(array_map($func, range(1, 5)));

// Oder ab PHP 7.4.0:

print_r(array_map(fn($value): int => $value * 2, range(1, 5)));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => 2
    [1] => 4
    [2] => 6
    [3] => 8
    [4] => 10
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function> - Verwendung mehrerer Arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
function show_Spanish(int $n, string $m): string
{
    return "Die Zahl {$n} heißt auf Spanisch {$m}";
}

function map_Spanish(int $n, string $m): array
{
    return [$n => $m];
}

$a = [1, 2, 3, 4, 5];
$b = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$c = array_map('show_Spanish', $a, $b);
print_r($c);

$d = array_map('map_Spanish', $a , $b);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// Ausgabe von $c
Array
(
    [0] => Die Zahl 1 heißt auf Spanisch uno
    [1] => Die Zahl 2 heißt auf Spanisch dos
    [2] => Die Zahl 3 heißt auf Spanisch tres
    [3] => Die Zahl 4 heißt auf Spanisch cuatro
    [4] => Die Zahl 5 heißt auf Spanisch cinco
)

// Ausgabe von $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Bei Verwendung von zwei oder mehr Arrays sollten diese die gleiche Länge
   besitzen, da die Callback-Funktion parallel auf die entsprechenden Elemente
   angewandt wird. Haben die Arrays unterschiedliche Längen, werden die
   kürzeren um leere Elemente erweitert, um mit der Länge des längsten
   übereinzustimmen.
  </para>
  <para>
   Eine interessante Anwendung dieser Funktion ist die Konstruktion eines
   Arrays bestehend aus Arrays, was mit &null; als Name der Callback-Funktion
   leicht realisiert werden kann.
  </para>
  <para>
   <example>
    <title>Durchführen einer zip-Operation von Arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = [1, 2, 3, 4, 5];
$b = ['eins', 'zwei', 'drei', 'vier', 'fünf'];
$c = ['uno', 'dos', 'tres', 'cuatro', 'cinco'];

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => eins
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => zwei
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => drei
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => vier
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => fünf
            [2] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     &null;-<parameter>callback</parameter> mit nur einem <parameter>array</parameter>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$array = [1, 2, 3];
var_dump(array_map(null, $array));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>array_map</function> - mit String-Schlüsseln</title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = ['stringkey' => 'value'];
function cb1($a) {
    return [$a];
}
function cb2($a, $b) {
    return [$a, $b];
}
var_dump(array_map('cb1', $arr));
var_dump(array_map('cb2', $arr, $arr));
var_dump(array_map(null,  $arr));
var_dump(array_map(null, $arr, $arr));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["stringkey"]=>
  array(1) {
    [0]=>
    string(5) "value"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
array(1) {
  ["stringkey"]=>
  string(5) "value"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
]]>
    </screen>
   </example>
   <example>
    <title><function>array_map</function> - assoziative Arrays</title>
    <para>
     Die <function>array_map</function> unterstützt die Verwendung des
     Array-Schlüssels als Eingabe zwar nicht direkt, aber dies kann mit
     <function>array_keys</function> simuliert werden.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$arr = [
    'v1' => 'erste Version',
    'v2' => 'zweite Version',
    'v3' => 'dritte Version',
];

// Hinweis: Vor 7.4.0 ist stattdessen die längere Syntax für anonyme
// Funktionen zu verwenden.
$callback = fn(string $k, string $v): string => "$k war die $v";

$result = array_map($callback, array_keys($arr), array_values($arr));

var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(24) "v1 war die erste Version"
  [1]=>
  string(25) "v2 war die zweite Version"
  [2]=>
  string(25) "v3 war die dritte Version"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_filter</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
