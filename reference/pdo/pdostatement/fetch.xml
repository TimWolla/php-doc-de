<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a8863b0123dc5348c91e67198b995222878a7e65 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>Ruft die nächste Zeile aus einer Ergebnismenge ab</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Ruft eine Zeile aus einer Ergebnismenge ab, die mit einem
   PDOStatement-Objekt verknüpft ist. Der Parameter
   <parameter>mode</parameter> bestimmt, wie PDO die Zeile zurückgibt.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Legt fest, wie die nächste Zeile an die aufrufende Methode
       zurückgegeben werden soll. Dieser Wert muss eine der
       <constant>PDO::FETCH_*</constant>-Konstanten sein. Voreingestellt ist
       <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant> (das standardmäßig
       auf <constant>PDO::FETCH_BOTH</constant> gesetzt ist).
       <itemizedlist>
        <listitem>
         <para>
          <constant>PDO::FETCH_ASSOC</constant>: gibt ein Array zurück, das
          durch die Spaltennamen der Ergebnismenge indiziert ist.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_BOTH</constant> (Voreinstellung): gibt ein
          Array zurück, das sowohl durch die Spaltennamen der Ergebnismenge
          als auch durch deren Spaltennummern (beginnend bei 0) indiziert ist.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_BOUND</constant>: gibt &true; zurück und weist
          die Werte der Spalten der Ergebnismenge den PHP-Variablen zu, an die
          sie mit der Methode
          <methodname>PDOStatement::bindColumn</methodname> gebunden wurden.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_CLASS</constant>: gibt eine neue Instanz der
          angeforderten Klasse zurück. Das Objekt wird initialisiert, indem die
          Spalten der Ergebnismenge den Eigenschaften der Klasse zugewiesen
          werden. Dies geschieht vor dem Aufruf des Konstruktors und erlaubt
          die Belegung von Eigenschaften unabhängig von ihrer Sichtbarkeit oder
          davon, ob sie als <literal>readonly</literal> markiert sind. Wenn
          eine Eigenschaft in der Klasse nicht existiert, wird die magische
          Methode <link linkend="object.set">__set()</link> aufgerufen, falls
          sie existiert; andernfalls wird eine dynamische öffentliche
          Eigenschaft erstellt. Wenn jedoch auch
          <constant>PDO::FETCH_PROPS_LATE</constant> angegeben ist, wird der
          Konstruktor <emphasis>vor</emphasis> dem Belegen der Eigenschaften
          aufgerufen. Wenn <parameter>mode</parameter> das Attribut
          <constant>PDO::FETCH_CLASSTYPE</constant> enthält (&zb;
          <literal>PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE</literal>), wird der
          Name der Klasse aus einem Wert der ersten Spalte ermittelt.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_INTO</constant>: aktualisiert eine bestehende
          Instanz der angeforderten Klasse, wobei die Spalten der
          Ergebnismenge den benannten Eigenschaften der Klasse zugeordnet
          werden.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_LAZY</constant>: kombiniert
          <constant>PDO::FETCH_BOTH</constant> und
          <constant>PDO::FETCH_OBJ</constant> und gibt ein
          <classname>PDORow</classname>-Objekt zurück, das die
          Eigenschaftsnamen des Objekts erstellt, wenn auf sie zugegriffen
          wird.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_NAMED</constant>: gibt ein Array zurück, das
          die gleiche Form hat wie <constant>PDO::FETCH_ASSOC</constant>. Wenn
          es jedoch mehrere Spalten mit demselben Namen gibt, ist der Wert,
          auf den der betreffende Schlüssel verweist, ein Array mit allen
          Werten in der Zeile, die diesen Spaltennamen hatten.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_NUM</constant>: gibt ein Array zurück, das
          durch die Spaltennummer aus der Ergebnismenge indiziert ist
          (beginnend bei Spalte 0).
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_OBJ</constant>: gibt ein anonymes Objekt mit
          Eigenschaftsnamen zurück, die den Spaltennamen aus der Ergebnismenge
          entsprechen.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_PROPS_LATE</constant>: in Kombination mit
          <constant>PDO::FETCH_CLASS</constant> wird der Konstruktor der
          Klasse aufgerufen, bevor die Eigenschaften aus den jeweiligen
          Spaltenwerten zugewiesen werden.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       Bei einem PDOStatement-Objekt, das einen scrollbaren Cursor
       repräsentiert, bestimmt dieser Wert, welche Zeile an die aufrufende
       Methode zurückgegeben werden soll. Dieser Wert muss eine der
       <constant>PDO::FETCH_ORI_*</constant>-Konstanten sein, wobei
       <constant>PDO::FETCH_ORI_NEXT</constant> voreingestellt ist. Wenn die
       SQL-Anweisung mit <methodname>PDO::prepare</methodname> vorbereitet
       wird, muss das Attribut <constant>PDO::ATTR_CURSOR</constant> auf
       <constant>PDO::CURSOR_SCROLL</constant> gesetzt werden, um einen
       scrollbaren Cursor für das PDOStatement-Objekt zu erhalten.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para>
       Bei einem PDOStatement-Objekt, das einen scrollbaren Cursor
       repräsentiert, dessen Parameter
       <parameter>cursorOrientation</parameter> auf
       <constant>PDO::FETCH_ORI_ABS</constant> gesetzt ist, gibt dieser Wert
       die absolute Nummer der Zeile in der Ergebnismenge an, die abgerufen
       werden soll.
      </para>
      <para>
       Bei einem PDOStatement-Objekt, das einen scrollbaren Cursor
       repräsentiert, dessen Parameter
       <parameter>cursorOrientation</parameter> auf
       <constant>PDO::FETCH_ORI_REL</constant> gesetzt ist, gibt dieser Wert
       die abzurufende Zeile relativ zur Position des Zeigers vor dem Aufruf
       von <methodname>PDOStatement::fetch</methodname> an.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bei Erfolg hängt der Rückgabewert dieser Funktion von der Art des Abrufs
   ab. Bei einem Fehler oder wenn es keine weiteren Zeilen gibt, wird in jedem
   Fall &false; zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Abrufen von Zeilen mit verschiedenen Arten des Abrufs</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Beispiele für die verschiedenen Arten von PDOStatement::fetch */
print "PDO::FETCH_ASSOC: ";
print "Die nächste Zeile als Array zurückgeben, das durch den Spaltennamen indiziert ist\n";
$Ergebnis = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print "\n";

print "PDO::FETCH_BOTH: ";
print "Die nächste Zeile als Array zurückgeben, das sowohl durch den Spaltennamen als auch durch die Spaltennummer indiziert ist\n";
$Ergebnis = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print "\n";

print "PDO::FETCH_LAZY: ";
print "Die nächste Zeile als PDORow-Objekt mit den Spaltennamen als Eigenschaften zurückgeben\n";
$Ergebnis = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print "\n";

print "PDO::FETCH_OBJ: ";
print "Die nächste Zeile als PDORow-Objekt mit den Spaltennamen als Eigenschaften zurückgeben\n";
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Die nächste Zeile als Array zurückgeben, das durch den Spaltennamen indiziert ist
Array
(
    [name] => apple
    [colour] => red
)

PDO::FETCH_BOTH: Die nächste Zeile als Array zurückgeben, das sowohl durch den Spaltennamen als auch durch die Spaltennummer indiziert ist
Array
(
    [name] => banana
    [0] => banana
    [colour] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Die nächste Zeile als anonymes Objekt mit den Spaltennamen als Eigenschaften zurückgeben
PDORow Object
(
    [name] => orange
    [colour] => orange
)

PDO::FETCH_OBJ: Die nächste Zeile als anonymes Objekt mit den Spaltennamen als Eigenschaften zurückgeben
kiwi
]]>
    </screen>
   </example>
   <example>
    <title>Abrufen von Zeilen mittels scrollbarem Cursor</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Vorwärts ausgelesen:\n";
readDataForwards($conn);

print "Rückwärts ausgelesen:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Vorwärts ausgelesen:
21    10    5
16    0     5
19    20    10

Rückwärts ausgelesen:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>
   <example>
    <title>Reihenfolge der Konstruktion</title>
    <simpara>
     Wenn Objekte über <constant>PDO::FETCH_CLASS</constant> abgerufen werden,
     werden zuerst die Objekteigenschaften zugewiesen und dann der Konstruktor
     der Klasse aufgerufen. Wenn jedoch zusätzlich
     <constant>PDO::FETCH_PROPS_LATE</constant> angegeben wird, wird diese
     Reihenfolge umgekehrt, &dh; zuerst wird der Konstruktor aufgerufen und
     danach werden die Eigenschaften zugewiesen.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "Ich heiße {$this->name}.\n";
        } else {
            echo "Ich habe noch keinen Namen.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Ich heiße Alice.
Ich heiße Alice.
Ich habe noch keinen Namen.
Ich heiße Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
