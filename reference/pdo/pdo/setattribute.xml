<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9d792d3c559fb0df638d3d8c649de7e02861cc4d Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.setattribute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::setAttribute</refname>
  <refpurpose>Setzt ein Attribut</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type>bool</type><methodname>PDO::setAttribute</methodname>
   <methodparam><type>int</type><parameter>attribute</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Legt ein Attribut für eine Datenbankverbindung fest. Einige der allgemein
   verfügbaren Attribute sind unten aufgeführt; manche Treiber verwenden
   möglicherweise zusätzliche treiberspezifische Attribute. Es ist zu
   beachten, dass die treiberspezifischen Attribute <emphasis>nicht</emphasis>
   mit anderen Treibern verwendet werden dürfen.
   <variablelist>
    <varlistentry>
     <term><constant>PDO::ATTR_CASE</constant></term>
     <listitem>
      <para>
       Erzwingt, dass Spaltennamen eine bestimmte Groß-/Kleinschreibung
       aufweisen; kann einen der folgenden Werte annehmen:
      </para>
      <variablelist>
       <varlistentry>
        <term><constant>PDO::CASE_LOWER</constant></term>
        <listitem>
         <simpara>
          Erzwingt, dass Spaltennamen klein geschrieben werden.
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><constant>PDO::CASE_NATURAL</constant></term>
        <listitem>
         <simpara>
          Belässt die Spaltennamen so, wie sie vom Datenbanktreiber
          zurückgegeben werden.
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><constant>PDO::CASE_UPPER</constant></term>
        <listitem>
         <simpara>
          Erzwingt, dass Spaltennamen groß geschrieben werden.
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_ERRMODE</constant></term>
     <listitem>
      <para>
       Modus der PDO-Fehlermeldung; kann einen der folgenden Werte annehmen:
      </para>
      <variablelist>
       <varlistentry>
        <term><constant>PDO::ERRMODE_SILENT</constant></term>
        <listitem>
         <simpara>
          Es werden nur Fehlercodes gesetzt.
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><constant>PDO::ERRMODE_WARNING</constant></term>
        <listitem>
         <simpara>
          Gibt einen Fehler der Stufe <constant>E_WARNING</constant> aus.
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><constant>PDO::ERRMODE_EXCEPTION</constant></term>
        <listitem>
         <simpara>
          Löst <classname>PDOException</classname>s aus.
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_ORACLE_NULLS</constant></term>
     <listitem>
      <note>
       <simpara>
        Dieses Attribut ist für alle Treiber verfügbar, nicht nur für Oracle.
       </simpara>
      </note>
      <para>
       Legt fest, ob und wie &null; und leere Strings umgewandelt werden
       sollen; kann einen der folgenden Werte annehmen:
      </para>
      <variablelist>
       <varlistentry>
        <term><constant>PDO::NULL_NATURAL</constant></term>
        <listitem>
         <simpara>
          Es findet keine Umwandlung statt.
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><constant>PDO::NULL_EMPTY_STRING</constant></term>
        <listitem>
         <simpara>
          Leere Zeichenketten werden in &null; umgewandelt.
         </simpara>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><constant>PDO::NULL_TO_STRING</constant></term>
        <listitem>
         <simpara>
          &null; wird in eine leere Zeichenkette umgewandelt.
         </simpara>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_STRINGIFY_FETCHES</constant></term>
     <listitem>
      <para>
       Legt fest, ob abgerufene numerische Werte in Zeichenketten umgewandelt
       werden sollen; akzeptiert einen Wert vom Typ <type>bool</type>: &true;
       zum Aktivieren und &false; zum Deaktivieren (Voreinstellung).
       &null;-Werte bleiben unverändert, es sei denn,
       <constant>PDO::ATTR_ORACLE_NULLS</constant> wird auf
       <constant>PDO::NULL_TO_STRING</constant> gesetzt.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_STATEMENT_CLASS</constant></term>
     <listitem>
      <para>
       Legt die vom Benutzer bereitgestellte Anweisungsklasse fest, die von
       PDOStatement abgeleitet ist; muss das Format
       <literal>array(string classname, array(mixed constructor_args))</literal>
       haben.
      </para>
      <caution>
       <simpara>
        Kann nicht mit persistenten PDO-Instanzen verwendet werden.
       </simpara>
      </caution>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_TIMEOUT</constant></term>
     <listitem>
      <para>
       Legt das Zeitlimit fest (in Sekunden); akzeptiert einen Wert vom Typ
       <type>int</type>.
      </para>
      <note>
       <para>
        Diese Option wird nicht von allen Treibern unterstützt und ihre
        Bedeutung kann sich je nach Treiber unterscheiden. So wartet SQLite
        beispielsweise bis zu diesem Zeitwert, bevor es aufgibt, eine
        beschreibbare Sperre zu erhalten, aber andere Treiber können dies als
        Zeitlimit für den Verbindungsaufbau oder den Lesevorgang
        interpretieren.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_AUTOCOMMIT</constant></term>
     <listitem>
      <note>
       <simpara>
        Nur für die OCI-, Firebird- und MySQL-Treiber verfügbar.
       </simpara>
      </note>
      <para>
       Legt fest, ob jede einzelne Anweisung automatisch bestätigt werden
       soll; akzeptiert einen Wert vom Typ <type>bool</type>: &true; zum
       Aktivieren und &false; zum Deaktivieren. Voreinstellung: &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_EMULATE_PREPARES</constant></term>
     <listitem>
      <note>
       <simpara>
        Nur für die OCI-, Firebird- und MySQL-Treiber verfügbar.
       </simpara>
      </note>
      <para>
       Aktiviert oder deaktiviert die Emulation vorbereiteter Anweisungen.
       Einige Treiber unterstützen vorbereitete Anweisungen nicht nativ oder
       nur eingeschränkt. Wenn es auf &true; gesetzt ist, werden vorbereitete
       Anweisungen immer emuliert, andernfalls versucht PDO, nativ
       vorbereitete Anweisungen zu verwenden. Falls der Treiber die aktuelle
       Abfrage nicht erfolgreich vorbereiten kann, greift PDO immer darauf
       zurück, die vorbereitete Anweisung zu emulieren.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</constant></term>
     <listitem>
      <note>
       <simpara>
        Nur für den MySQL-Treiber verfügbar.
       </simpara>
      </note>
      <para>
       Legt fest, ob gepufferte Abfragen verwendet werden sollen; akzeptiert
       einen Wert vom Typ <type>bool</type>: &true; zum Aktivieren und &false;
       zum Deaktivieren. Voreinstellung: &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant></term>
     <listitem>
      <para>
       Legt den standardmäßigen Abrufmodus fest. Eine Beschreibung der Modi
       und ihrer Verwendung ist in der Dokumentation zu
       <methodname>PDOStatement::fetch</methodname> zu finden.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>attribute</parameter></term>
     <listitem>
      <para>
       Das Attribut, das geändert werden soll.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Der Wert, auf den <parameter>attribute</parameter> gesetzt wird; je
       nach Attribut kann ein bestimmter Typ erforderlich sein.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::getAttribute</function></member>
    <member><function>PDOStatement::getAttribute</function></member>
    <member><function>PDOStatement::setAttribute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
