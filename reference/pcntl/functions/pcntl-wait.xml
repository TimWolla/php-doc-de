<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Reviewer: samesch -->
<refentry xml:id="function.pcntl-wait" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_wait</refname>
  <refpurpose>Wartet auf ein abgezweigtes Kind oder gibt dessen Status zurück</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_wait</methodname>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   Die Funktion wait unterbricht die Ausführung des aktuellen Prozesses, bis
   ein Kindprozess beendet ist oder bis ein Signal gesendet wird, um den
   aktuellen Prozess zu beenden oder eine Signalverabeitungsfunktion
   aufzurufen. Wenn ein Kindprozess zum Zeitpunkt des Funktionsaufrufs bereits
   beendet ist (ein sog. "Zombie"-Prozess), kehrt die Funktion umgehend
   zurück. Alle durch den Kindprozess verwendeten Ressourcen werden
   freigegeben. Spezifische Details, wie wait auf dem jeweiligen System
   funktioniert, sind in der wait(2)-Manpage des Systems zu finden.
  </para>
  <note>
   <para>
    Ohne <parameter>flags</parameter> entspricht diese Funktion dem Aufruf der
    Funktion <function>pcntl_waitpid</function> mit <literal>-1</literal> als
    <parameter>process_id</parameter>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_wait</function> speichert Statusinformationen im
       Parameter <parameter>status</parameter>, welcher durch die folgenden
       Funktionen ausgewertet werden kann:
       <function>pcntl_wifexited</function>,
       <function>pcntl_wifstopped</function>,
       <function>pcntl_wifsignaled</function>,
       <function>pcntl_wexitstatus</function>,
       <function>pcntl_wtermsig</function> und
       <function>pcntl_wstopsig</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Wenn wait3 auf dem System verfügbar ist (meist BSD-artige Systeme) kann
       der optionale Parameter <parameter>flags</parameter> angegeben werden.
       Wenn dieser Parameter nicht angegeben wurde, wird wait als Systemaufruf
       verwendet. Wenn wait3 nicht verfügbar ist, hat die Angabe eines Wertes
       für <parameter>flags</parameter> keinerlei Auswirkungen. Der Wert von
       <parameter>flags</parameter> ist der Wert von keiner oder mehr der
       folgenden durch <literal>OR</literal> verknüpften beiden Konstanten:
       <table>
        <title>Mögliche Werte für <parameter>flags</parameter></title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><constant>WNOHANG</constant></entry>
           <entry>
            Gebe umgehend zurück, wenn kein Kind beendet wurde.
           </entry>
          </row>
          <row>
           <entry><constant>WUNTRACED</constant></entry>
           <entry>
            Gebe bei Kindern zurück, die angehalten wurden und deren Status
            nicht gemeldet wurde.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_wait</function> gibt die Prozess-ID des Kindes zurück, das
   beendet wurde, -1 im Fehlerfall, oder 0, wenn WNOHANG als Option angegeben
   wurde (auf Systemen mit wait3) und kein Kind verfügbar war.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
