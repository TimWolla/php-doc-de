<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1993c38d254743d8c0a2140ff6f797660997083d Maintainer: lapistano Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.sqlitecreatefunction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::sqliteCreateFunction</refname>
  <refpurpose>
   Registriert eine benutzerdefinierte Funktion (UDF) zur Nutzung in
   SQL-Anweisungen
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDO::sqliteCreateFunction</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>num_args</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  &warn.experimental.func;
  <para>
   Diese Methode ermöglicht es, in SQLite eine PHP-Funktion als eine
   benutzerdefinierte Funktion (<acronym>UDF</acronym>) zu registrieren, die
   dann in einer SQL-Anweisung aufgerufen werden kann.
  </para>
  <para>
   Die UDF kann nun in jeder SQL-Anweisung genutzt werden, die Funktionen
   aufrufen kann, wie SELECT und UPDATE und auch in Triggern.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       Der Name der Funktion, der in SQL-Anweisungen genutzt wird.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Die Callback-Funktion, die die definierte SQL-Funktion verarbeitet.
      </para>
      <note>
       <simpara>
        Die Callback-Funktionen sollten einen Typ zurückgeben, der von SQLite
        verstanden wird, &zb; den
        <link linkend="language.types.intro">Skalar-Typ</link>.
       </simpara>
      </note>
      <para>
       Diese Funktion muss wie folgt definiert werden:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>callback</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
        <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>value</parameter></term>
         <listitem>
          <para>
           Das erste Argument, das an die SQL-Funktion übergeben wurde.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>values</parameter></term>
         <listitem>
          <para>
           Weitere Argumente, die an die SQL-Funktion übergeben wurden.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Die Anzahl von Argumenten, die die SQL-Funktion erwartet. Ist dieser
       Parameter <literal>-1</literal>, dann kann die SQL-Funktion eine
       beliebige Anzahl von Argumenten annehmen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Eine bitweise Verknüpfung von Flags. Zurzeit wird nur
       <constant>PDO::SQLITE_DETERMINISTIC</constant> unterstützt, das angibt,
       dass die Funktion für dieselbe Eingabe immer dasselbe Ergebnis
       innerhalb einer einzelnen SQL-Anweisung zurückgibt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.1.4</entry>
      <entry>
       Der Parameter <parameter>flags</parameter> wurde hinzugefügt.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>PDO::sqliteCreateFunction</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_und_umkehren($string)
{
    return strrev(hash('md5', $string));
}

$db = new PDO('sqlite:sqlitedb');
$db->sqliteCreateFunction('md5rev', 'md5_und_umkehren', 1);
$zeilen = $db->query('SELECT md5rev(dateiname) FROM dateien')->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   In diesem Beispiel wird eine Funktion verwendet, die die md5-Checksumme
   einer Zeichenkette berechnet und anschließend umgekehrt. Wenn die
   SQL-Anweisung ausgeführt wird, gibt sie gibt sie den Wert des Dateinamens
   zurück, der von unserer Funktion umgewandelt wurde. Die Rückgabewerte der
   Funktion werden in <literal>$zeilen</literal> gespeichert.
  </para>
  <para>
   Das Praktische an dieser Technik ist, dass das Ergebnis der Abfrage nicht
   in einer &foreach;-Schleife nachbearbeitet werden muss.
  </para>
  <!-- not for PDO it doesn't, at least not yet
  <para>
   Wenn die Datenbank zum ersten Mal geöffnet wird, registriert PHP eine
   spezielle Funktion namens <literal>php</literal>. Die Funktion php kann
   verwendet werden, um jede PHP-Funktion aufzurufen, ohne sie vorher
   registrieren zu müssen.
  </para>
  <para>
   <example>
    <title>Beispiel für die Verwendung der PHP-Funktion</title>
    <programlisting role="php">
<![CDATA[
<?php
$zeilen = $db->query("SELECT php('md5', dateiname) from dateien")->fetchAll();
?>
]]>
    </programlisting>
    <para>
     Dieses Beispiel ruft die Funktion <function>md5</function> für jede
     <literal>dateiname</literal>-Spalte in der Datenbank auf und übergibt das
     Ergebnis an <parameter>$zeilen</parameter>.
    </para>
   </example>
  </para>

  -->
  <tip>
   <para>
    Sie können <xref linkend="pdo.sqlitecreatefunction" /> und
    <xref linkend="pdo.sqlitecreateaggregate" /> nutzen, um native
    SQLite-SQL-Funktionen zu überschreiben.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="pdo.sqlitecreateaggregate" /></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
