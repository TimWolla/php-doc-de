<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 66aff414be91c5a0446be585aa6ac78121de1e67 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: a997a6c1452e55557bbce59701c9d560ae0e2b8a Reviewer: samesch -->

<appendix xml:id="password.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants.core;

 <para>
  <variablelist>
   <varlistentry xml:id="constant.password-bcrypt">
    <term>
     <constant>PASSWORD_BCRYPT</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <para>
      <constant>PASSWORD_BCRYPT</constant> wird verwendet, um neue
      Passwort-Hashes unter Verwendung des <constant>CRYPT_BLOWFISH</constant>
      Algorithmus zu erzeugen.
     </para>
     <para>
      Dies ergibt immer einen Hash, der das "$2y$"-Crypt-Format verwendet und
      immer 60 Zeichen lang ist.
     </para>
     <para>
      Unterstützte Optionen:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>salt</literal> (<type>string</type>) - um manuell ein Salt
        anzugeben, das beim Hashing des Passworts verwendet wird. Es ist zu
        beachten, dass dies die automatische Erzeugung des Salt verhindert.
       </para>
       <para>
        Wird diese Option ausgelassen, dann wird von
        <function>password_hash</function> ein zufälliges Salt für jedes
        gehashte Passwort erzeugt. Dies ist die vorgesehene Funktionsweise,
        und von PHP 7.0.0 an wird die salt-Option missbilligt.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>cost</literal> (<type>int</type>) - bezeichnet den
        algorithmischen Aufwand, der angewendet werden soll. Beispiele dieses
        Wertes können der <function>crypt</function>-Dokumentation entnommen
        werden.
       </para>
       <para>
        Wird diese Option ausgelassen, dann wird der Standardwert
        <literal>12</literal> verwendet. Das ist eine gute Ausgangsbasis, aber
        es ist zu erwägen, diesen Wert in Abhängigkeit von der Hardware zu
        erhöhen.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-bcrypt-default-cost">
    <term>
     <constant>PASSWORD_BCRYPT_DEFAULT_COST</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <para>
     </para>
     <para>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-argon2i">
    <term>
     <constant>PASSWORD_ARGON2I</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <para>
      <constant>PASSWORD_ARGON2I</constant> wird verwendet, um neue
      Passwort-Hashes unter Verwendung des Argon2i-Algorithmus zu erzeugen.
     </para>
     <para>
      Unterstützte Optionen:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>memory_cost</literal> (<type>int</type>) - die Obergrenze des
        Speichers (in Kibibytes), der verwendet werden darf, um den Argon2-Hash
        zu berechnen. Der Vorgabewert ist
        <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>time_cost</literal> (<type>int</type>) - die Höchstdauer der
        Berechnung des Argon2-Hashs. Der Vorgabewert ist
        <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>.
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>threads</literal> (<type>int</type>) - Die Anzahl der
        Threads, die für die Berechnung des Argon2-Hashs verwendet werden. Der
        Vorgabewert ist <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>.
        Nur mit libargon2 verfügbar, nicht mit der libsodium-Implementierung.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      Verfügbar von PHP 7.2.0 an.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-argon2id">
    <term>
     <constant>PASSWORD_ARGON2ID</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <para>
      <constant>PASSWORD_ARGON2ID</constant> wird verwendet, um neue
      Passwort-Hashes unter Verwendung des Argon2id-Algorithmus zu erzeugen.
      Es werden dieselben Optionen wie bei
      <link linkend="constant.password-argon2i"><constant>PASSWORD_ARGON2I</constant></link>
      unterstützt.
     </para>
     <para>
      Verfügbar von PHP 7.3.0 an.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-argon2-default-memory-cost">
    <term>
     <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <para>
      Der Vorgabewert des Speichers in Bytes, der beim Versuch, den Hash zu
      berechnen, verwenden wird.
     </para>
     <para>
      Verfügbar von PHP 7.2.0 an.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-argon2-default-time-cost">
    <term>
     <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <para>
      Der Vorgabewert der Dauer, die beim Versuch, den Hash zu berechnen,
      verwenden wird.
     </para>
     <para>
      Verfügbar von PHP 7.2.0 an.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-argon2-default-threads">
    <term>
     <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>
     (<type>int</type>)
    </term>
    <listitem>
     <para>
      Der Vorgabewert der Anzahl Threads, die Argon2lib verwenden wird.
     </para>
     <para>
      Verfügbar von PHP 7.2.0 an.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-argon2-provider">
    <term>
     <constant>PASSWORD_ARGON2_PROVIDER</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <para>
     </para>
     <para>
      Verfügbar von PHP 7.4.0 an.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.password-default">
    <term>
     <constant>PASSWORD_DEFAULT</constant>
     (<type>string</type>)
    </term>
    <listitem>
     <para>
      Der Vorgabewert des Algorithmus, der für das Hashing verwendet wird,
      wenn kein Algorithmus angegeben wird. Dies kann sich in neueren
      PHP-Releases ändern, wenn neuere, stärkere Hash-Algorithmen unterstützt
      werden.
     </para>
     <para>
      Es ist zu betonen, dass sich diese Konstante im Lauf der Zeit ändern
      kann. Daher ist es wichtig zu beachten, dass sich die Länge des
      resultierenden Hashs ändern kann. Also sollte bei Verwendung von
      <constant>PASSWORD_DEFAULT</constant> der sich ergebende Hash so
      gespeichert werden, dass beliebige Hashes gespeichert werden können; die
      empfohlene Breite ist <literal>255</literal> Bytes.
     </para>
     <simpara>
      Derzeit ist dies ein Alias für <constant>PASSWORD_BCRYPT</constant>.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>

 <formalpara>
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Die Werte der Passwort-Algorithmen-IDs
        (<constant>PASSWORD_BCRYPT</constant>,
        <constant>PASSWORD_ARGON2I</constant>,
        <constant>PASSWORD_ARGON2ID</constant> und
        <constant>PASSWORD_DEFAULT</constant>) sind nun &string;s. Zuvor waren
        es &integer;.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </formalpara>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
