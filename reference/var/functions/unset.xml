<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d816a0fad6c458d9515f697cc89e26ca9d8069f5 Maintainer: sammywg Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose><function>unset</function> (löschen) einer angegebenen Variablen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> löscht die angegebene Variable.
  </para>
  <para>
   Das Verhalten von <function>unset</function> innerhalb einer Funktion kann
   abhängig davon, was für einen Variablentyp Sie zu löschen versuchen,
   variieren.
  </para>
  <para>
   Wenn eine globalisierte Variable innerhalb einer Funktion mit
   <function>unset</function> behandelt wird, wird nur die lokale Variable
   gelöscht. Die Variable innerhalb der aufrufenden Umgebung behält den selben
   Wert wie vor dem Aufruf von <function>unset</function>.
   <example>
    <title>Verwendung von <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Um eine globale Variable innerhalb einer Funktion mittels
   <function>unset</function> zu löschen, kann das
   <varname>$GLOBALS</varname>-Array verwendet werden:
   <example>
    <title><function>unset</function> bei einer globalen Variable</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Wenn eine Variable, die als Referenz übergeben wird ("Passed by Reference"),
   innerhalb einer Funktion gelöscht wird, wird nur die lokale Variable
   gelöscht. Die Variable im aufrufenden Environment enthält den selben Wert
   wie vor dem Aufruf von <function>unset</function>.
   <example>
    <title><function>unset</function> bei einer Referenz</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Wenn eine statische Variable innerhalb einer Funktion gelöscht wird, löscht
   <function>unset</function> die Variable nur im Kontext des verbleibenden
   Funktionsablaufs. Die folgenden Aufrufe stellen den vorhergehenden Wert der
   Variablen wieder her.
   <example>
    <title><function>unset</function> bei einer statischen Variable</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Vor unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "nach unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Die zu löschende Variable.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       Weitere zu löschende Variablen ...
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unset</function>-Beispiel</title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
// löscht eine einzelne Variable
unset($foo);

// löscht ein einzelnes Element eines Arrays
unset($bar['quux']);

// löscht mehr als eine Variable
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Es ist möglich, Objekteigenschaften zu löschen, die im aktuellen Kontext
    sichtbar sind.
   </para>
   <para>
    Falls deklariert, wird <link linkend="object.get">__get()</link>
    aufgerufen, wenn auf eine nicht gesetzte Eigenschaft zugegriffen wird, und
    <link linkend="object.set">__set()</link> wird aufgerufen, wenn eine nicht
    gesetzte Eigenschaft gesetzt wird.
   </para>
  </note>
  <note>
   <para>
    Es ist nicht möglich, <literal>$this</literal> innerhalb einer
    Objektmethode zu löschen.
   </para>
  </note>
  <note>
   <para>
    Wenn <function>unset</function> auf Objekteigenschaften angewendet wird,
    auf die nicht direkt zugegriffen werden kann, wird, sofern sie deklariert
    wurde, die Überladungsmethode <link
    linkend="object.unset">__unset</link> aufgerufen.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">(unset) casting</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
