<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 32c55286c8739fd20de9c8624473b2f3268de68e Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 83a17a7324c2597bd6385148abf19f76127229f5 Reviewer: samesch -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Prüft, ob ein Wert als Funktion aus dem aktuellen Bereich aufgerufen werden kann.
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Prüft, ob <parameter>value</parameter> ein <type>callable</type> ist oder
   mit der Funktion <function>call_user_func</function> aufgerufen werden kann.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Der zu prüfende Wert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Wenn dieser Parameter auf &true; gesetzt wird, prüft die Funktion nur,
       ob <parameter>value</parameter> eine Funktion oder Methode sein könnte.
       Es werden alle Werte zurückgewiesen, die keine
       <link linkend="object.invoke">invocable</link> Objekte,
       <classname>Closure</classname>s, &string;s oder &array;s sind, die nicht
       die richtige Struktur haben, um als Callback verwendet werden zu können.
       Ein gültiges Callable-Array hat 2 Einträge, wobei der erste ein Objekt
       oder ein String und der zweite ein String ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Hier wird der "aufrufbare Name" abgelegt, &zb;
       <literal>"SomeClass::someMethod"</literal>. Es ist jedoch zu beachten,
       dass trotz der Implikation, dass
       <literal>SomeClass::someMethod()</literal> eine aufrufbare statische
       Methode ist, dies nicht der Fall ist.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt &true; zurück, wenn <parameter>value</parameter> aufrufbar ist, sonst
   &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Prüfent, ob eine Zeichenkette als Funktion aufgerufen werden kann</title>
    <programlisting role="php">
<![CDATA[
<?php

function someFunction() {}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(12) "someFunction"
]]>
    </screen>
   </example>
   <example>
    <title>Prüfent, ob ein Array als Funktion aufgerufen werden kann</title>
    <programlisting role="php">
<![CDATA[
<?php

class SomeClass
{
    public function someMethod() {}
}

$anObject = new SomeClass();

$methodVariable = [$anObject, 'someMethod'];

var_dump(is_callable($methodVariable, true, $callable_name));

var_dump($callable_name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
string(21) "SomeClass::someMethod"
]]>
    </screen>
   </example>
   <example>
    <title><function>is_callable</function> und Konstruktoren</title>
    <simpara>
     Obwohl Konstruktoren die Methoden sind, die aufgerufen werden, wenn ein
     Objekt erzeugt wird, sind sie keine statischen Methoden und
     <function>is_callable</function> gibt &false; für sie zurück. Es ist nicht
     möglich, mit <function>is_callable</function> zu prüfen, ob eine Klasse
     aus der aktuellen Domäne instanziiert werden kann.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}

    public function foo() {}
}

var_dump(
    is_callable(['Foo', '__construct']),
    is_callable(['Foo', 'foo'])
);

$foo = new Foo();
var_dump(is_callable([$foo, '__construct']));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
bool(true)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Ein Objekt ist immer aufrufbar, wenn es
    <link linkend="object.invoke">__invoke()</link> implementiert und diese
    Methode im aktuellen Bereich sichtbar ist.
   </member>
   <member>
    Ein Klassenname ist aufrufbar, wenn er
    <link linkend="object.callstatic">__callStatic()</link> implementiert.
   </member>
   <member>
    Wenn ein Objekt <link linkend="object.call">__call()</link> implementiert,
    dann wird diese Funktion für jede Methode dieses Objekts &true;
    zurückgeben, auch wenn die Methode nicht definiert ist.
   </member>
   <member>
    Diese Funktion kann Autoloading auslösen, wenn sie mit dem Namen einer
    Klasse aufgerufen wird.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
