<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9b1673cf114a1e10c4563ab9223cb56aed552b89 Maintainer: wiesemann Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: a223531900823441f82d178ca4e94c0444f24576 Reviewer: samesch -->
<refentry xml:id="function.utf8-encode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>utf8_encode</refname>
  <refpurpose>Konvertiert eine Zeichenkette von ISO-8859-1 nach UTF-8</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &warn.deprecated.function-8-2-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier role="attribute">#[\Deprecated]</modifier>
   <type>string</type><methodname>utf8_encode</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <para>
   Diese Funktion konvertiert die Zeichenkette <parameter>string</parameter>
   von der <literal>ISO-8859-1</literal>-Kodierung nach <literal>UTF-8</literal>.
  </para>
  <note>
   <para>
    Diese Funktion versucht nicht, die aktuelle Kodierung der angegebenen
    Zeichenkette zu erraten, sondern nimmt an, dass sie als ISO-8859-1 (auch
    bekannt als "Latin 1") kodiert ist, und konvertiert nach UTF-8. Da jede
    Folge von Bytes eine gültige ISO-8859-1-Zeichenkette ist, führt dies zwar
    nie zu einem Fehler, aber auch nicht zu einer brauchbaren Zeichenkette,
    wenn eine andere Kodierung vorgesehen war.
   </para>
   <para>
    Viele Webseiten, die ausgewiesen sind, die
    <literal>ISO-8859-1</literal>-Zeichenkodierung zu verwenden, nutzen in
    Wirklichkeit die ähnliche <literal>Windows-1252</literal>-Kodierung, und
    Webbrowser interpretieren <literal>ISO-8859-1</literal>-Webseiten als
    <literal>Windows-1252</literal>. <literal>Windows-1252</literal>
    ermöglicht zusätzliche druckbare Zeichen, so wie das Euro-Zeichen
    (<literal>€</literal>) und geschweifte Anführungszeichen
    (<literal>“</literal><literal>”</literal>), anstelle von bestimmten
    <literal>ISO-8859-1</literal>-Kontrollzeichen. Diese Funktion konvertiert
    solche <literal>Windows-1252</literal>-Zeichen nicht korrekt. Verwenden
    Sie eine andere Funktion, wenn
    <literal>Windows-1252</literal>-Konvertierung erforderlich ist.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Eine ISO-8859-1-kodierte Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt die UTF-8-Übersetzung von <parameter>string</parameter> zurück.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.2.0</entry>
       <entry>
        Diese Funktion ist veraltet.
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        Diese Funktion wurde von der Erweiterung XML in den Kern von PHP
        verschoben. In früheren Versionen war diese Funktion nur verfügbar,
        wenn die Erweiterung XML installiert war.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Grundlegendes Beispiel</title>
   <programlisting role="php">
<![CDATA[
<?php
// Konvertiert die Zeichenkette "Zoë" von ISO 8859-1 nach UTF-8
$iso8859_1_string = "\x5A\x6F\xEB";
$utf8_string = utf8_encode($iso8859_1_string);
echo bin2hex($utf8_string), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
5a6fc3ab
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Wegfall und Alternativen</title>
   <para>
    Diese Funktion ist ab PHP 8.2.0 <emphasis>veraltet</emphasis> und wird in
    einer zukünftigen Version entfernt. Bereits vorhandene Verwendungen
    sollten überprüft und durch geeignete Alternativen ersetzt werden.
   </para>
   <para>
    Die Funktion <function>mb_convert_encoding</function> bietet eine ähnliche
    Funktionalität und unterstützt ISO-8859-1 und viele andere
    Zeichenkodierungen.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$iso8859_1_string = "\xEB"; // 'ë' (e mit Trema) in ISO-8859-1
$utf8_string = mb_convert_encoding($iso8859_1_string, 'UTF-8', 'ISO-8859-1');
echo bin2hex($utf8_string), "\n";

$iso8859_7_string = "\xEB"; // in ISO-8859-7 steht dieselbe Zeichenkette für 'λ' (griechisches Lambda kleingeschrieben)
$utf8_string = mb_convert_encoding($iso8859_7_string, 'UTF-8', 'ISO-8859-7');
echo bin2hex($utf8_string), "\n";

$windows_1252_string = "\x80"; // '€' (Euro-Zeichen) in Windows-1252, aber nicht in ISO-8859-1
$utf8_string = mb_convert_encoding($windows_1252_string, 'UTF-8', 'Windows-1252');
echo bin2hex($utf8_string), "\n";
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
c3ab
cebb
e282ac
]]>
     </screen>
    </informalexample>
   </para>
   <para>
    Andere Optionen, die in Abhängigkeit von den installierten Erweiterungen
    verfügbar sein können, sind <methodname>UConverter::transcode</methodname>
    und <function>iconv</function>.
   </para>
   <para>
    Die folgenden Beispiele führen alle zum selben Ergebnis:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$iso8859_1_string = "\x5A\x6F\xEB"; // 'Zoë' in ISO-8859-1

$utf8_string = utf8_encode($iso8859_1_string);
echo bin2hex($utf8_string), "\n";

$utf8_string = mb_convert_encoding($iso8859_1_string, 'UTF-8', 'ISO-8859-1');
echo bin2hex($utf8_string), "\n";

$utf8_string = UConverter::transcode($iso8859_1_string, 'UTF8', 'ISO-8859-1');
echo bin2hex($utf8_string), "\n";

$utf8_string = iconv('ISO-8859-1', 'UTF-8', $iso8859_1_string);
echo bin2hex($utf8_string), "\n";
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
5a6fc3ab
5a6fc3ab
5a6fc3ab
5a6fc3ab
]]>
     </screen>
    </informalexample>
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>utf8_decode</function></member>
    <member><function>mb_convert_encoding</function></member>
    <member><methodname>UConverter::transcode</methodname></member>
    <member><function>iconv</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
