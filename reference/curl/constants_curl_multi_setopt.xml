<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 141b05e576781405f9077abbe89e7a8b2a5eb946 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<variablelist xml:id="constant.curl-multi-setopt.constants" role="constant_list">
 <title><function>curl_multi_setopt</function></title>
  <varlistentry xml:id="constant.curlmopt-chunk-length-penalty-size">
   <term>
    <constant>CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt den Schwellenwert der Teilstücke-Länge für das Pipelining in Bytes an.
     Verfügbar seit PHP 7.0.7 und cURL 7.30.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-content-length-penalty-size">
   <term>
    <constant>CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt den Schwellenwert für die Größe der Pipelining-Strafe in Bytes an.
     Verfügbar seit PHP 7.0.7 und cURL 7.30.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-maxconnects">
   <term>
    <constant>CURLMOPT_MAXCONNECTS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt die maximale Anzahl der gleichzeitig geöffneten Verbindungen an, die
     libcurl zwischenspeichern darf. Standardmäßig wird die Anzahl so weit
     vergrößert, dass sie viermal so groß ist wie die Anzahl der Handles, die
     mit <function>curl_multi_add_handle</function> hinzugefügt wurden.
     Wenn der Zwischenspeicher voll ist, schließt cURL die älteste Verbindung
     im Zwischenspeicher, um zu verhindern, dass die Anzahl der offenen
     Verbindungen ansteigt.
     Verfügbar seit cURL 7.16.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-max-concurrent-streams">
   <term>
    <constant>CURLMOPT_MAX_CONCURRENT_STREAMS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt die maximale Anzahl gleichzeitiger Streams für Verbindungen an, die
     cURL bei Verbindungen mit HTTP/2 unterstützen soll.
     Gültige Werte reichen von <literal>1</literal> bis
     <literal>2147483647</literal> (<literal>2^31 - 1</literal>).
     Der hier übergebene Wert wird auf der Grundlage anderer Eigenschaften der
     Systemressourcen berücksichtigt.
     Standard ist <literal>100</literal>.
     Verfügbar seit PHP 8.2.0 und cURL 7.67.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-max-host-connections">
   <term>
    <constant>CURLMOPT_MAX_HOST_CONNECTIONS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt die maximale Anzahl der Verbindungen zu einem einzelnen Host an.
     Verfügbar seit PHP 7.0.7 und cURL 7.30.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-max-pipeline-length">
   <term>
    <constant>CURLMOPT_MAX_PIPELINE_LENGTH</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt die maximale Anzahl von Anfragen in einer Pipeline an.
     Verfügbar seit PHP 7.0.7 und cURL 7.30.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-max-total-connections">
   <term>
    <constant>CURLMOPT_MAX_TOTAL_CONNECTIONS</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Gibt die maximale Anzahl der gleichzeitig geöffneten Verbindungen an.
     Verfügbar seit PHP 7.0.7 und cURL 7.30.0
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-pipelining">
   <term>
    <constant>CURLMOPT_PIPELINING</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Durch 1 wird das Pipelining aktiviert und durch 0 deaktiviert.
     Wenn Pipelining auf einem Mehrfach-Handle aktiviert wird, versucht cURL,
     für Übertragungen mit diesem Handle so weit wie möglich HTTP-Pipelining
     zu nutzen. Das bedeutet, dass eine zweite Anfrage, die eine bereits
     bestehende Verbindung nutzen kann, über dieselbe Verbindung geleitet
     (ge"pipe"t) wird.
     Seit cURL 7.43.0 ist der Wert eine Bitmaske und wenn 2 übergeben wird,
     wird versucht, die neue Übertragung über eine bestehende
     HTTP/2-Verbindung zu multiplexen.
     Die Übergabe von 3 weist cURL an, Pipelining und Multiplexing unabhängig
     voneinander anzufordern.
     Seit cURL 7.62.0 hat das Setzen des Pipelining-Bits keine Wirkung mehr.
     Anstelle der ganzzahligen Literale können auch die CURLPIPE_*-Konstanten
     verwendet werden.
     Verfügbar seit cURL 7.16.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.curlmopt-pushfunction">
   <term>
    <constant>CURLMOPT_PUSHFUNCTION</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <para>
     Ein <type>callable</type>, der registriert wird, um
     Push-Benachrichtigungen des Servers zu verarbeiten. Er sollte die
     folgende Signatur haben:
     <methodsynopsis>
      <type>int</type><methodname><replaceable>pushfunction</replaceable></methodname>
      <methodparam><type>resource</type><parameter>parent_ch</parameter></methodparam>
      <methodparam><type>resource</type><parameter>pushed_ch</parameter></methodparam>
      <methodparam><type>array</type><parameter>headers</parameter></methodparam>
     </methodsynopsis>
     <variablelist role="function_parameters">
      <varlistentry>
       <term><parameter>parent_ch</parameter></term>
       <listitem>
        <simpara>
         Das übergeordnete cURL-Handle (die vom Client gestellte Anfrage).
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>pushed_ch</parameter></term>
       <listitem>
        <simpara>
         Ein neues cURL-Handle für die gesendete Anfrage.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>headers</parameter></term>
       <listitem>
        <simpara>
         Die Push-Promise-Header.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     Die Push-Funktion soll entweder <constant>CURL_PUSH_OK</constant>
     zurückgeben, wenn sie den Push verarbeiten kann, oder
     <constant>CURL_PUSH_DENY</constant>, um ihn abzulehnen.
     Verfügbar seit PHP 7.1.0 und cURL 7.44.0
    </para>
   </listitem>
  </varlistentry>
</variablelist>
