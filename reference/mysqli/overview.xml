<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mysqli.overview" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

  <title>Übersicht</title>

  <para>
   Dieser Abschnitt bietet eine Einführung in die Möglichkeiten, die bei der
   Entwicklung einer PHP-Anwendung, die mit einer MySQL-Datenbank interagieren
   soll, zur Verfügung stehen.
  </para>

  <para>
   <emphasis role="bold">Was ist eine API?</emphasis>
  </para>

  <para>
   Eine Schnittstelle zur Programmierung von Anwendungen (Application
   Programming Interface, API) definiert die Klassen, Methoden, Funktionen und
   Variablen, die eine Anwendung aufrufen muss, um die gewünschte Aufgabe zu
   erfüllen. Im Falle von PHP-Anwendungen, die mit Datenbanken kommunizieren
   müssen, werden die erforderlichen APIs in der Regel über PHP-Erweiterungen
   bereitgestellt.
  </para>

  <para>
   APIs können entweder prozedural oder objektorientiert sein. Bei einer
   prozeduralen API werden Funktionen aufgerufen, um Aufgaben auszuführen,
   während bei einer objektorientierten API Klassen instanziiert und dann die
   Methoden der resultierenden Objekte aufgerufen werden. Von den beiden ist
   die letztere in der Regel die bevorzugte Schnittstelle, da sie moderner ist
   und zu besser strukturiertem Code führt.
  </para>

  <para>
   Wenn eine PHP-Anwendung geschrieben wird, die sich mit dem MySQL-Server
   verbinden muss, stehen mehrere APIs zur Verfügung. In diesem Dokument wird
   beschrieben, welche Möglichkeiten es gibt und welche die beste Wahl für die
   jeweilige Anwendung ist.
  </para>

  <para>
   <emphasis role="bold">Was ist ein Konnektor?</emphasis>
  </para>

  <para>
   Der Begriff Konnektor, wie er in der MySQL-Dokumentation verwendet wird,
   bezieht sich auf Software, die es ermöglicht, von einer Anwendung aus eine
   Verbindung zum MySQL-Datenbankserver herzustellen. MySQL bietet Konnektoren
   für verschiedene Sprachen, darunter PHP.
  </para>

  <para>
   Wenn eine PHP-Anwendung mit einem Datenbankserver kommunizieren soll, muss
   PHP-Code geschrieben werden, der die Verbindung zum Datenbankserver, die
   Abfrage der Datenbank und andere datenbankbezogene Funktionen ermöglicht.
   Es wird eine Software benötigt, die die API für die Kommunikation zwischen
   der Anwendung und dem Datenbankserver zur Verfügung stellt und
   gegebenenfalls andere zwischengeschaltete Bibliotheken verwendet. Diese
   Software wird allgemein als Konnektor bezeichnet, weil sie es der Anwendung
   ermöglicht, sich mit einem Datenbankserver zu verbinden.
  </para>

  <para>
   <emphasis role="bold">Was ist ein Treiber?</emphasis>
  </para>

  <para>
   Ein Treiber ist ein Stück Software, das für die Kommunikation mit einem
   bestimmten Typ von Datenbankserver entwickelt wurde. Der Treiber kann auch
   eine Bibliothek aufrufen, &zb; die MySQL Client Library oder den MySQL
   Native Driver. Diese Bibliotheken implementieren das Low-Level-Protokoll,
   das für die Kommunikation mit dem MySQL-Datenbankserver verwendet wird.
  </para>

  <para>
   So verwendet beispielsweise die Datenbankabstraktionsschicht
   <link linkend="mysqli.overview.pdo">PHP Data Objects (PDO)</link> einen von
   mehreren datenbankspezifischen Treibern. Einer der verfügbaren Treiber ist
   der PDO-MYSQL-Treiber, der eine Schnittstelle zum MySQL-Server bietet.
  </para>

  <para>
   Manchmal werden die Begriffe Konnektor und Treiber synonym verwendet, was
   verwirrend sein kann. In der MySQL-Dokumentation ist der Begriff "Treiber"
   für Software reserviert, die den datenbankspezifischen Teil eines
   Konnektor-Pakets bereitstellt.
  </para>

  <para>
   <emphasis role="bold">Was ist eine Erweiterung?</emphasis>
  </para>

  <para>
   In der PHP-Dokumentation wird häufig der Begriff
   <emphasis>Erweiterung</emphasis> verwendet. Der PHP-Code besteht aus einem
   Kern und optionalen Erweiterungen der Kernfunktionalität. Zu den
   PHP-Erweiterungen für MySQL gehören mysqli und der PDO-Treiber für
   MySQL, die mit Hilfe des PHP-Frameworks für Erweiterungen implementiert
   werden.
  </para>

  <para>
   Damit die Funktionen einer Erweiterung von PHP-Programmierern
   programmtechnisch genutzt werden können, stellt diese in der Regel eine API
   zur Verfügung. Allerdings stellen nicht alle Erweiterungen, die das
   Framework für PHP-Erweiterungen verwenden, dem PHP-Programmierer eine API
   zur Verfügung.
  </para>

  <para>
   Der PDO-Treiber für MySQL beispielsweise stellt dem PHP-Programmierer keine
   API zur Verfügung, sondern eine Schnittstelle zur darüber liegenden
   PDO-Schicht.
  </para>

  <para>
   Die Begriffe API und Erweiterung sollten nicht als gleichbedeutend
   angesehen werden, da eine Erweiterung dem Programmierer nicht unbedingt
   eine API zur Verfügung stellt.
  </para>

  <para>
   <emphasis role="bold">Was sind die wichtigsten PHP-APIs, die für die
   Verwendung von MySQL zur Verfügung stehen?</emphasis>
  </para>

  <para>
   Wenn eine Verbindung zu einem MySQL-Datenbankserver hergestellt werden
   soll, gibt es im Wesentlichen zwei Optionen für die API:
  </para>

  <itemizedlist>

    <listitem>
      <para>
       Die PHP-Erweiterung mysqli
      </para>
    </listitem>

    <listitem>
      <para>
       PHP Data Objects (PDO)
      </para>
    </listitem>

  </itemizedlist>

  <para>
   Jede hat ihre eigenen Vor- und Nachteile. Die folgende Diskussion soll eine
   kurze Einführung in die wichtigsten Aspekte der einzelnen APIs geben.
  </para>

  <para>
    <emphasis role="bold">Was ist die PHP-Erweiterung mysqli?</emphasis>
  </para>

  <para>
   Die Erweiterung <literal>mysqli</literal>, auch bekannt als MySQL
   <emphasis>improved</emphasis>, wurde entwickelt, um die Vorteile der neuen
   Funktionen, die in MySQL-Systemen ab Version 4.1.3 zur Verfügung stehen,
   nutzen zu können. <literal>mysqli</literal> ist in PHP ab Version 5
   enthalten.
  </para>

  <para>
   <literal>mysqli</literal> bietet viele Vorteile, aber die wichtigsten
   Verbesserungen gegenüber <literal>mysql</literal> sind:

    <itemizedlist>

      <listitem>
        <para>
         Objektorientierte Schnittstelle
        </para>
      </listitem>

      <listitem>
        <para>
         Unterstützung für vorbereitete Anweisungen
        </para>
      </listitem>

      <listitem>
        <para>
         Unterstützung für Mehrfachanweisungen
        </para>
      </listitem>

      <listitem>
        <para>
         Unterstützung für Transaktionen
        </para>
      </listitem>

      <listitem>
        <para>
         Verbesserte Debugging-Funktionen
        </para>
      </listitem>

    </itemizedlist>
  </para>

  <para>
   Zusätzlich zur objektorientierten Schnittstelle bietet die Erweiterung auch
   eine prozedurale Schnittstelle.
  </para>

  <para>
   Die Erweiterung <literal>mysqli</literal> wird mit Hilfe des PHP-Frameworks
   für Erweiterungen erstellt; der Quellcode befindet sich im Verzeichnis
   <filename>ext/mysqli</filename>.
  </para>

  <para>
   Weitere Informationen über die Erweiterung <literal>mysqli</literal> sind
   unter <xref linkend="book.mysqli"/> zu finden.
  </para>

  <para xml:id="mysqli.overview.pdo">
    <emphasis role="bold">Was ist PDO?</emphasis>
  </para>

  <para>
   PHP Data Objects, oder PDO, ist eine Abstraktionsschicht für Datenbanken
   speziell für PHP-Anwendungen. PDO bietet eine einheitliche API, die
   unabhängig von der Art des Datenbankservers ist, mit dem sich die Anwendung
   verbindet. Wenn die PDO-API verwendet wird, könnte man theoretisch den
   verwendeten Datenbankserver wechseln, beispielsweise von Firebird zu MySQL,
   und müsste nur geringfügige Änderungen am PHP-Code vornehmen.
  </para>

  <para>
   Andere Beispiele für Datenbankabstraktionsschichten sind JDBC für
   Java-Anwendungen und DBI für Perl.
  </para>

  <para>
   PDO hat zwar seine Vorteile, &zb; eine klare, einfache und portierbare
   API, aber sein Hauptnachteil ist, dass es nicht möglich ist, alle
   verbesserten Features zu nutzen, die in den neuesten Versionen des
   MySQL-Servers verfügbar sind. Beispielsweise können mit PDO nicht die
   Mehrfachanweisungen von MySQL genutzt werden.
  </para>

  <para>
   PDO wird mit Hilfe des PHP-Frameworks für Erweiterungen erstellt; der
   Quellcode befindet sich im Verzeichnis <filename>ext/pdo</filename>.
  </para>

  <para>
   Weitere Informationen über PDO sind unter <xref linkend="book.pdo"/> zu
   finden.
  </para>

  <para>
    <emphasis role="bold">Was ist der PDO-MYSQL-Treiber?</emphasis>
  </para>

  <para>
   Der PDO-MYSQL-Treiber ist zumindest aus der Sicht eines PHP-Programmiers
   keine API im eigentlichen Sinne. Genau genommen befindet sich der
   PDO-MYSQL-Treiber in der Schicht unter PDO selbst und bietet eine
   MySQL-spezifische Funktionalität. Der Programmierer ruft zwar die PDO-API
   auf, aber PDO verwendet den PDO-MYSQL-Treiber, um mit dem MySQL-Server zu
   kommunizieren.
  </para>

  <para>
   Der PDO-MYSQL-Treiber ist einer von mehreren verfügbaren PDO-Treibern.
   Daneben gibt es unter anderem PDO-Treiber für die Datenbankserver Firebird
   und PostgreSQL.
  </para>

  <para>
   Der PDO-MYSQL-Treiber wird mit Hilfe des PHP-Frameworks für Erweiterungen
   erstellt; er stellt dem PHP-Programmierer keine API zur Verfügung. Der
   Quellcode befindet sich im Verzeichnis <filename>ext/pdo_mysql</filename>.
  </para>

  <para>
   Weitere Informationen über den PDO-MYSQL-Treiber sind unter
   <xref linkend="ref.pdo-mysql"/> zu finden.
  </para>

  <para xml:id="mysqli.overview.mysqlnd">
    <emphasis role="bold">Was ist PHPs MySQL Native Driver?</emphasis>
  </para>

  <para>
   Um mit dem MySQL-Datenbankserver zu kommunizieren, verwenden
   <literal>mysqli</literal> und der PDO-MYSQL-Treiber jeweils eine
   Low-Level-Bibliothek, die das erforderliche Protokoll implementiert. In der
   Vergangenheit war die einzige verfügbare Bibliothek die MySQL Client
   Library, auch bekannt als <literal>libmysqlclient</literal>.
  </para>

  <para>
   Die Schnittstelle von <literal>libmysqlclient</literal> wurde jedoch
   ursprünglich für C-Anwendungen entwickelt und ist daher nicht für die
   Kommunikation mit PHP-Anwendungen optimiert. Aus diesem Grund wurde für
   PHP-Anwendungen der MySQL Native Driver, <literal>mysqlnd</literal>, als
   Alternative zu <literal>libmysqlclient</literal> entwickelt.
  </para>

  <para>
   Sowohl die Erweiterung <literal>mysqli</literal> als auch der PDO-Treiber
   für MySQL können jeweils so konfiguriert werden, dass sie entweder
   <literal>libmysqlclient</literal> oder <literal>mysqlnd</literal>
   verwenden. Da <literal>mysqlnd</literal> speziell für die Verwendung im
   PHP-System entwickelt wurde, verfügt es über zahlreiche Speicher- und
   Geschwindigkeitsverbesserungen gegenüber <literal>libmysqlclient</literal>.
   Es wird dringend empfohlen, diese Verbesserungen zu nutzen.
  </para>

  <para>
   Der MySQL Native Driver wird mit Hilfe des PHP-Frameworks für Erweiterungen
   erstellt; er stellt dem PHP-Programmierer keine API zur Verfügung. Der
   Quellcode befindet sich im Verzeichnis <filename>ext/mysqlnd</filename>.
  </para>

<!-- TODO
  <para>
    For further information on the MySQL Native Driver, see
    <xref linkend="book.mysqlnd"/>.
  </para>
-->

  <para>
   <emphasis role="bold">Vergleich der Merkmale</emphasis>
  </para>

  <para>
   Die folgende Tabelle vergleicht die Funktionalität der wichtigsten Methoden
   für den Aufbau einer Verbindung zu MySQL mittels PHP:
  </para>

  <table xml:id="mysqli.overview.option.comparison">
   <title>Vergleich der MySQL-API-Optionen in PHP</title>
    <tgroup cols="3">
      <colspec colwidth="34*"/>
      <colspec colwidth="33*"/>
      <colspec colwidth="33*"/>
      <thead>
        <row>
          <entry></entry>
          <entry>PHP-Erweiterung mysqli</entry>
          <entry>PDO (mit PDO-Treiber für MySQL und MySQL Native Driver)</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>PHP-Version der Einführung</entry>
          <entry>5.0</entry>
          <entry>5.0</entry>
        </row>
        <row>
          <entry>MySQL-Entwicklungsstatus</entry>
          <entry>In aktiver Entwicklung</entry>
          <entry>In aktiver Entwicklung</entry>
        </row>
        <row>
          <entry>API unterstützt Zeichensätze</entry>
          <entry>Ja</entry>
          <entry>Ja</entry>
        </row>
        <row>
          <entry>API unterstützt serverseitige vorbereitete Anweisungen</entry>
          <entry>Ja</entry>
          <entry>Ja</entry>
        </row>
        <row>
          <entry>API unterstützt clientseitige vorbereitete Anweisungen</entry>
          <entry>Nein</entry>
          <entry>Ja</entry>
        </row>
        <row>
          <entry>API unterstützt gespeicherte Prozeduren</entry>
          <entry>Ja</entry>
          <entry>Ja</entry>
        </row>
        <row>
          <entry>API unterstützt Mehrfachanweisungen</entry>
          <entry>Ja</entry>
          <entry>Weitestgehend</entry>
        </row>
        <row>
          <entry>Unterstützt die gesamte Funktionalität von MySQL 4.1+</entry>
          <entry>Ja</entry>
          <entry>Weitestgehend</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
<!--
  <para>
    <emphasis role="bold">Further information</emphasis>
  </para>

  <para>
    The PHP distribution and documentation are available from the
    <link xlink:href="&url.php;">PHP Web site</link>.
  </para>
-->
</chapter>
